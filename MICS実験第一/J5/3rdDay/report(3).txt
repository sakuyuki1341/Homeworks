MICS実験 J5課題 出席レポート
学籍番号：1810678
　氏名　：山田朔也

今回の実験時間では、練習２まで解けたため、
レポートで練習2のソースコードを記述し、その説明を行う。
まずは作成したソースコードを以下に記述する。

|t21.c|
――――――――――――――――――――――――――――――――――――――――――――――――
/* t20.c -- compiler for a simple language */
#include <stdio.h>
struct stab {
	int val;
	char name[20]; } stab[100];
int stabuse = 0;
struct node {
int type, left, right; } ntab[400];
int ntabuse = 1;

#define T_STLIST 1
#define T_ASSIGN 2
#define T_READ 3
#define T_PRINT 4
#define T_ADD 5
#define T_SUB 6
#define T_MUL 7
#define T_DIV 8
#define T_REM 9
#define T_NUM 10
#define T_VAR 11
#define T_WHILE 12
#define T_IF 13
#define T_LT 14
#define T_GT 15

int lookup(char*);
int node(int, int, int);
void dotree(int);

extern char *yytext;
#include "y.tab.c"
#include "lex.yy.c"

int main() {
	yyparse();
	return 0;
}

int lookup(char *s) {
	int i;
	for(i = 0; i < stabuse; ++i)
		if(strcmp(stab[i].name, s) == 0) return i;
	if(stabuse >= 99) {
		printf("table overflow.\n"); exit(1); }
	strcpy(stab[stabuse].name, s); return stabuse++;
}

int node(int t, int l, int r) {
	int i = ntabuse++;
	ntab[i].type = t;
	ntab[i].left = l;
	ntab[i].right = r;
	return i;
}

void dotree(int i) {
int stk;
printf(" .section .rodata\n");
printf(".Lprompt: .string\"> \"\n"); /* プロンプト */
printf(".Lread: .string\"%%ld\"\n"); /* 読み取り用書式 */
printf(".Lprint: .string\"%%ld\\n\"\n"); /* 書き出し用書式 */
printf(" .text\n");
printf(".global main\n");
printf("main:\n");
printf(" pushq %%rbp\n");
printf(" movq %%rsp,%%rbp\n");
stk = (8*stabuse + 15) / 16; /* 変数の個数*8 で 16 の倍数へ切り上げ */
stk *= 16;
printf(" subq $%d,%%rsp\n", stk);
emittree(i);
printf(" leave\n");
printf(" ret\n");
}

void emittree(int i)
{
	switch(ntab[i].type) {
	case T_STLIST: 
		if(ntab[i].left) emittree(ntab[i].left);
		emittree(ntab[i].right);
		break;
	case T_READ: printf(" movq $.Lprompt,%%rdi\n");
		printf(" movq $0,%%rax\n"); /* 浮動小数点レジスタを使わない */
		printf(" call printf\n");
		printf(" leaq %d(%%rbp),%%rsi\n", -(ntab[i].left+1)*8);
		printf(" movq $.Lread,%%rdi\n");
		printf(" movq $0,%%rax\n"); /* 浮動小数点レジスタを使わない */
		printf(" call scanf\n");
		break;
	case T_PRINT: emittree(ntab[i].left);
		printf(" popq %%rsi\n");
		printf(" movq $.Lprint,%%rdi\n");
		printf(" movq $0,%%rax\n"); /* 浮動小数点レジスタを使わない */
		printf(" call printf\n");
		break;
	case T_NUM: printf(" pushq $%d\n", ntab[i].left);
		break;
	case T_VAR: printf(" pushq %d(%%rbp)\n", -(ntab[i].left+1)*8);
		break;
	case T_ASSIGN: emittree(ntab[i].right);
		printf(" popq %d(%%rbp)\n", -(ntab[i].left+1)*8);
		break;
	case T_ADD: emittree(ntab[i].left);
		emittree(ntab[i].right);
		printf(" popq %%rdx\n");
		printf(" popq %%rax\n");
		printf(" addq %%rdx,%%rax\n");
		printf(" pushq %%rax\n");
		break;
	case T_MUL: emittree(ntab[i].left);
		emittree(ntab[i].right);
		printf(" popq %%rdx\n");
		printf(" popq %%rax\n");
		printf(" imulq %%rdx\n");
		printf(" pushq %%rax\n");
		break;
	default: printf("NotImplemented: %d\n", ntab[i].type);
		break;
	}
}
――――――――――――――――――――――――――――――――――――――――――――――――

|t20.lex|
――――――――――――――――――――――――――――――――――――――――――――――――
/* t20.lex -- lexical definitions for a simple language */
alpha [a-zA-Z]
digit [0-9]
white [\n\t ]
%%
while						{ return WHILE; }
if							{ return IF; }
read						{ return READ; }
print						{ return PRINT; }
{alpha}({alpha}|{digit})*	{ return IDENT; }
{digit}+					{ return NUM; }
[-+()=;{}<>*/%]				{ return yytext[0]; }
{white}						{ ; }
――――――――――――――――――――――――――――――――――――――――――――――――
|t20.yacc|
――――――――――――――――――――――――――――――――――――――――――――――――
/* t20.yacc -- syntax definitions for a simple language */
%token NUM;
%token IDENT;
%token READ;
%token PRINT;
%token WHILE;
%token IF;
%%
prog 	: IDENT '{' stlist '}' { dotree($3); return 0; }
		;
stlist	: { $$ = 0; }
		| stlist stat { $$ = node(T_STLIST, $1, $2); }
		;
stat	: var '=' expr ';' { $$ = node(T_ASSIGN, $1, $3); }
		| READ var ';' { $$ = node(T_READ, $2, 0); }
		| PRINT expr ';' { $$ = node(T_PRINT, $2, 0); }
		| WHILE '(' cond ')' stat { $$ = node(T_WHILE, $3, $5); }
		| IF '(' cond ')' stat { $$ = node(T_IF, $3, $5); }
		| '{' stlist '}' { $$ = $2; }
		;
cond	: expr '<' expr { $$ = node(T_LT, $1, $3); }
		| expr '>' expr { $$ = node(T_GT, $1, $3); }
		;
expr	: prim { $$ = $1; }
		| expr '+' prim { $$ = node(T_ADD, $1, $3); }
		| expr '-' prim { $$ = node(T_SUB, $1, $3); }
		| expr '*' prim { $$ = node(T_MUL, $1, $3); }
		| expr '/' prim { $$ = node(T_DIV, $1, $3); }
		| expr '%' prim { $$ = node(T_REM, $1, $3); }
		;
prim	: NUM { $$ = node(T_NUM, atoi(yytext), 0); }
		| var { $$ = node(T_VAR, $1, 0); }
		| '(' expr ')' { $$ = $2; }
		;
var		: IDENT { $$ = lookup(yytext); }
		;
――――――――――――――――――――――――――――――――――――――――――――――――

|test2.uec|
――――――――――――――――――――――――――――――――――――――――――――――――
main {
	read x;
	read y;
	x = x + 1;
	print x + y;
	print x * y;
}
――――――――――――――――――――――――――――――――――――――――――――――――

次に実行例を記述する
|実行例|
――――――――――――――――――――――――――――――――――――――――――――――――
[y1810678@blue14 3rdDay]$ lex t20.lex
[y1810678@blue14 3rdDay]$ yacc t20.yacc
[y1810678@blue14 3rdDay]$ cc -o uecc t21.c -ll -ly
[y1810678@blue14 3rdDay]$ ./uecc <test2.uec > test2.s
[y1810678@blue14 3rdDay]$ cc test2.s
[y1810678@blue14 3rdDay]$ ./a.out
> 5
> 3
9
18
――――――――――――――――――――――――――――――――――――――――――――――――

最後に説明を行う。
このプログラムでは、練習1に足し算と掛け算の演算ができるように機能が追加されたものだ。
そのため、test2.uecに足し算と掛け算の演算をするようなコードを記述することで、
正常にその結果が返されるようになっている。