/**
 * DecisionEngineRouter.java was adapted to cope with Dlife and DlifeComm.
 * 
 * Copyright 2010 by University of Pittsburgh
 * Copyright 2012 SITI, Universidade Lusófona
 * 
 * Dlife and DlifeComm are free softwares: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Dlife and DlifeComm are distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Dlife and DlifeComm.  If not, see <http://www.gnu.org/licenses/>.
 *
 * 
 */

package routing;

import java.util.*;

import core.*;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.io.FileWriter;
import java.io.IOException;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;

import routing.community.CommunityDetection;

import core.Connection;
import core.DTNHost;
import core.Message;
import core.Settings;
import core.SimClock;
import core.SlotTimeCheck;
import core.Tuple;

public class DecisionEngineRouter extends ActiveRouter
{
	private ArrayList<Map<DTNHost,Double>> averageDurations; // every slot of averageDuration corresponds to a specific slot of a day containing the average duration for all the nodes that did set up a connection with THIS node  

	/** SCORP 
	 * deltaT and startconnectiontime changed from private Map<DTNHost,Double> 
	 * as they now store a list on interests 
	 *
	 * Map to save the starting times a connection of the several nodes ---- 
	 * "-1" if there is no connection at the moment */
	private Map<DTNHost, Map<String,Double>> timeEncounterWithInterests;  
	
	private Map<String,Double> timeWithInterests;    
	
	/** Map to save the connectiontimes of the nodes for the current slot */
	private Map<String,Double> connectedTimeToInterests;    
	
	/** every slot of averageDuration corresponds to a specific slot of a day 
	 * containing the average duration for all the nodes that did set up a connection with THIS node */
	private ArrayList<Map<String,Double>> averageConnectedTimeToInterests;   

//	private Map<DTNHost,Double> startconnectiontime; // Map to save the starting times a connection of the several nodes ---- "-1" if there is no connection at the moment 
//	private Map<DTNHost,Double> deltaT;    //Map to save the connectiontimes of the nodes for the current slot
//	private Map<DTNHost,Double> deltaTforImportance;
//	private Map<DTNHost,Double> importancemap; //Stores the importance of encountered nodes
//	private double importance;

//	public static Map<DTNHost, Double> weights;
	public static Map<DTNHost, Map<DTNHost, Double>> weightsCopy= new HashMap<DTNHost, Map<DTNHost, Double>>();
	/** SCORP */
	public static Map<String, Double> weightToInterests;
	public static Map<DTNHost, Map<String, Double>> weightToInterestsCopy= new HashMap<DTNHost, Map<String, Double>>();

	public static Map<DTNHost, Double> importCopy= new HashMap<DTNHost, Double>();
	public static DecisionEngineRouter host;
	protected CommunityDetection community;

	int predCount=0;
	
	public static final String PUBSUB_NS = "DecisionEngineRouter";
	public static final String ENGINE_SETTING = "decisionEngine";
	public static final String TOMBSTONE_SETTING = "tombstones";
	public static final String CONNECTION_STATE_SETTING = "";
	
	protected boolean tombstoning;
	protected RoutingDecisionEngine decider;
	protected List<Tuple<Message, Connection>> outgoingMessages;
	
	protected Set<String> tombstones;
	
	/** how often TTL check (discarding old messages) is performed */
	 public static int TTL_CHECK_INTERVAL = 60;
	 /** sim time when the last TTL check was done */
	 private double lastTtlCheck;
	
	/** 
	 * Used to save state machine when new connections are made. See comment in
	 * changedConnection() 
	 */
	protected Map<Connection, Integer> conStates;
	
	
	
	public DecisionEngineRouter(Settings s)
	{
		super(s);
		
		Settings routeSettings = new Settings(PUBSUB_NS);
		
		outgoingMessages = new LinkedList<Tuple<Message, Connection>>();
		
		decider = (RoutingDecisionEngine)routeSettings.createIntializedObject(
				"routing." + routeSettings.getSetting(ENGINE_SETTING));
		
		if(routeSettings.contains(TOMBSTONE_SETTING))
			tombstoning = routeSettings.getBoolean(TOMBSTONE_SETTING);
		else
			tombstoning = false;
		
		if(tombstoning)
			tombstones = new HashSet<String>(10);
		conStates = new HashMap<Connection, Integer>(4);

//		initWeights();		
//		averageDurations=new ArrayList<Map<DTNHost,Double>>(SlotTimeCheck.getnumberofslots());
		/** CHANGED FROM initPreds() */
		weightToInterests = new HashMap<String, Double>();       /** SCORP */
		//new:
		averageConnectedTimeToInterests=new ArrayList<Map<String,Double>>(SlotTimeCheck.getnumberofslots());
		//----------------------------------------------------------------------------------------------------↑
		for(int i=0;i<SlotTimeCheck.getnumberofslots();i++){
			Map<DTNHost,Double> map=new HashMap<DTNHost,Double>();
			averageConnectedTimeToInterests.add(map);
//			averageDurations.add(map);
		}

		timeEncounterWithInterests=new HashMap<DTNHost, Map<String,Double>>(); 		/** SCORP */
		timeWithInterests=new HashMap<String,Double>();
		connectedTimeToInterests=new HashMap<String,Double>();                    /** SCORP */

//		startconnectiontime=new HashMap<DTNHost,Double>();
//		deltaT=new HashMap<DTNHost,Double>();
//		importancemap=new HashMap<DTNHost,Double>();
//		importance=0;
	}

	public DecisionEngineRouter(DecisionEngineRouter r)
	{
		super(r);
		outgoingMessages = new LinkedList<Tuple<Message, Connection>>();
		decider = r.decider.replicate();
		tombstoning = r.tombstoning;
		
		if(this.tombstoning)
			tombstones = new HashSet<String>(10);
		conStates = new HashMap<Connection, Integer>(4);
		
//		initWeights();
//		averageDurations=new ArrayList<Map<DTNHost,Double>>(SlotTimeCheck.getnumberofslots());
		weightToInterests = new HashMap<String, Double>();      /** SCORP */
		//new:
		averageConnectedTimeToInterests = new ArrayList<Map<String,Double>>(SlotTimeCheck.getnumberofslots());
		for(int i=0;i<SlotTimeCheck.getnumberofslots();i++){
			Map<DTNHost,Double> map=new HashMap<DTNHost,Double>();
			averageConnectedTimeToInterests.add(map);
//			averageDurations.add(map);
		}
		timeEncounterWithInterests=new HashMap<DTNHost, Map<String,Double>>();  		/** SCORP */
		timeWithInterests=new HashMap<String,Double>();
		connectedTimeToInterests=new HashMap<String,Double>();                    /** SCORP */
//		startconnectiontime=new HashMap<DTNHost,Double>();
//		deltaT=new HashMap<DTNHost,Double>();
//		importancemap=new HashMap<DTNHost,Double>();
//		importance=0;
	}

	@Override
	public MessageRouter replicate()
	{
		return new DecisionEngineRouter(this);
	}

	@Override
	 public boolean createNewMessage(Message m){
		if(decider.newMessage(m)){
			makeRoomForNewMessage(m.getSize());
			m.setTtl(this.msgTtl);
			addToMessages(m, true); 
			findConnectionsForNewMessage(m, getHost());
			return true;
		}
		return false;
	 }

//	public void initWeights() {
//		this.weights = new HashMap<DTNHost, Double>();
//	}

	
	@Override
	public void changedConnection(Connection con)
	{
		DTNHost myHost = getHost();
		DTNHost otherNode = con.getOtherNode(myHost);
		DecisionEngineRouter otherRouter = (DecisionEngineRouter)otherNode.getRouter();

		if(con.isUp())
		{
//			updatestartconnectiontime(otherNode);   
//			updateImportancemap(otherNode);
			keepTrackConnectionStartTime(otherNode);    //new function

			decider.connectionUp(myHost, otherNode);
			
			if(shouldNotifyPeer(con))
			{
				this.doExchange(con, otherNode);
				otherRouter.didExchange(con);
			}
			
			/*
			 * Once we have new information computed for the peer, we figure out if
			 * there are any messages that should get sent to this peer.
			 */
			Collection<Message> msgs = getMessageCollection();
			for(Message m : msgs)
			{
				if(decider.shouldSendMessageToHost(m, myHost, otherNode))
					outgoingMessages.add(new Tuple<Message,Connection>(m, con));
			}
		}
		else 
		{

//			updatedeltaT(otherNode);
//			setstarttimeoff(otherNode);
			computeConnectedTime(otherNode);

			decider.connectionDown(myHost, otherNode);
			
			conStates.remove(con);
			
			/*
			 * If we  were trying to send message to this peer, we need to remove them
			 * from the outgoing List.
			 */
			for(Iterator<Tuple<Message,Connection>> i = outgoingMessages.iterator(); 
					i.hasNext();)
			{
				Tuple<Message, Connection> t = i.next();
				if(t.getValue() == con)
					i.remove();
			}
		}
	}




	/** Keeps track of the time of encounter with the 
	 *  different interests of users **/
	private void keepTrackConnectionStartTime(DTNHost encounteredHost) {
		List<String> interestEncHost = new ArrayList<String>();
		interestEncHost=encounteredHost.getInterests();
		Map<String,Double> interestSet = new HashMap<String,Double>();
		//System.out.println("this host: " + this.getHost());
		//System.out.println("encounteredHost: "+encounteredHost);
		//System.out.println("time of encounter: " + SimClock.getTime());
		//System.out.println("Interests of encounteredHost: "+interestEncHost);
		
		timeWithInterests.clear();
//		timeEncounterWithInterests.clear();
		
		for(String aIntEncHost : interestEncHost){
			if(!interestSet.containsKey(aIntEncHost)){
				interestSet.put(aIntEncHost, SimClock.getTime());
				timeWithInterests.put(aIntEncHost, SimClock.getTime());
			}
//							
//			else
//				timeEncounterWithInterests.put(aIntEncHost, SimClock.getTime());	
		}
		//System.out.println("timeWithInterests: "+timeWithInterests);
		//System.out.println("startconnectiontime of this host: "+ interestSet);
		timeEncounterWithInterests.put(encounteredHost, interestSet);
		//System.out.println("timeEncounterWithInterests: " + timeEncounterWithInterests);
	}

	/** Compute the time this host has spent with 
	 *  the different interests of users **/
	private void computeConnectedTime(DTNHost encounteredHost){
		Map<String, Double> encHostInterests = new HashMap<String,Double>();
		encHostInterests = timeEncounterWithInterests.get(encounteredHost);
		Set<String> deltaHostToUp= encHostInterests.keySet();
		Iterator<String> deltaIterator=deltaHostToUp.iterator();		
		
		//System.out.println("this host: " + this.getHost());
		//System.out.println("this Host connections: "+ this.getConnections());
		//System.out.println("encounteredHost: "+ encounteredHost);
		//System.out.println("interests of enc host: " + encHostInterests);
		//System.out.println("time of disconnection: " + SimClock.getTime());
		//System.out.println("deltaHostToUp: " + deltaHostToUp);
		//System.out.println("deltaT: "+connectedTimeToInterests);
		
		while(deltaIterator.hasNext()){            
		String currentInterest = deltaIterator.next();
			if(!connectedTimeToInterests.containsKey(currentInterest))
			{
				//System.out.println("currentInterest: "+ currentInterest +" not in delta.");
				connectedTimeToInterests.put(currentInterest, SimClock.getTime()-encHostInterests.get(currentInterest));
			}
			else
			{
				//System.out.println("currentInterest: "+ currentInterest +" already in delta.");
				connectedTimeToInterests.put(currentInterest, connectedTimeToInterests.get(currentInterest)+(SimClock.getTime()-encHostInterests.get(currentInterest)));
			}
		}
	}




	
//	private void updatestartconnectiontime(DTNHost host) {
//		if(startconnectiontime.get(host)!=null){
//			if(startconnectiontime.get(host)>=0){      //  method to check if everything runs all right --- TODO should be removed afterwards
//				
//			}
//			else{
//				startconnectiontime.put(host, SimClock.getTime());
//			}
//		}
//		else{
//		startconnectiontime.put(host, SimClock.getTime());
//		}
// TODO erase later on:		weights.put(host, newValue);
//	}

//	private void updateImportancemap(DTNHost host){
//		double importa=((DecisionEngineRouter)host.getRouter()).getImportance();
//	    importancemap.put(host, importa);
//	}


//	private void updatedeltaT(DTNHost host){
//		if(deltaT.get(host)!=null){
//			deltaT.put(host, deltaT.get(host)+(SimClock.getTime()-startconnectiontime.get(host)));
//		}
//		else{
//			if(startconnectiontime.get(host)==null){
//				System.out.println("porque");
//			}
//			else{
//			deltaT.put(host,SimClock.getTime()-startconnectiontime.get(host));
//			}
//		}
//	}

//	private void setstarttimeoff(DTNHost host){
//		startconnectiontime.put(host,-1.0);
//	}

	public void calcdeltaTandAD(){
		Set<DTNHost> hostset= startconnectiontime.keySet();
		Iterator<DTNHost> hostIterator=hostset.iterator();
		Map<DTNHost,Double> tempList = new HashMap<DTNHost,Double>();
		while(hostIterator.hasNext()){             //TODO still have to check how the iterator reacts to changes in the Map 
			DTNHost currenthost = hostIterator.next();
			if(startconnectiontime.get(currenthost)>=0){
				updatedeltaT(currenthost);
				tempList.put(currenthost,SimClock.getTime()); //set the starttime on the beginning of the new slot
				
			}
		}  //at this point the startconnectiontime map is ready for the next slot: -times of existing connections set to the next slot  -others deleted
		startconnectiontime=tempList;
		updateAverageDuration();
		updateWeights();
		updateImportance();
		long currentday=SlotTimeCheck.getDay();
		int currentslot = SlotTimeCheck.getcurrentslot();
		weightsCopy.put(this.getHost(),weights);
	}

	/** Called after each daily sample **/
	public void dailySampleDone(){
		/** SCORP */
		//System.out.println("timeEncounterWithInterests: "+timeEncounterWithInterests);
		//System.out.println("deltaT in calcdeltaTandAD: " + connectedTimeToInterests);
		//System.out.println("this.getHost() in calcdeltaTandAD: "+this.getHost());
				
		Iterator<Connection> connections = this.getHost().getConnections().iterator();
		ArrayList<DTNHost> thisHostConnectedToNodes = new ArrayList<DTNHost>(this.getHost().getConnections().size());
	
		if(!this.getHost().getConnections().isEmpty()){
			
			while(connections.hasNext()){
				DTNHost otherHost = connections.next().getOtherNode(this.getHost());
				thisHostConnectedToNodes.add(otherHost);
			}
			//System.out.println("connected to: "+thisHostConnectedToNodes);			
//		}		
//		if(!this.getHost().getConnections().isEmpty()){
			Iterator<DTNHost> connToNodes = thisHostConnectedToNodes.iterator();
			
			while(connToNodes.hasNext()){
				
				DTNHost connTo = connToNodes.next();
				
				//System.out.println("calculando delta para no: " + connTo);
				
				Map<String, Double> intConnTo = timeEncounterWithInterests.get(connTo);				
				Set<String> interestToUp = intConnTo.keySet();
				Iterator<String> intToUpIterator = interestToUp.iterator();
				
			while(intToUpIterator.hasNext()){            
				String currentInterest = intToUpIterator.next();
				if(!connectedTimeToInterests.containsKey(currentInterest))
				{
					//System.out.println("currentInterest: "+ currentInterest +" not in delta.");
					connectedTimeToInterests.put(currentInterest, SimClock.getTime()-intConnTo.get(currentInterest));
				}
				else
				{
					//System.out.println("currentInterest: "+ currentInterest +" already in delta.");
					connectedTimeToInterests.put(currentInterest, connectedTimeToInterests.get(currentInterest)+(SimClock.getTime()-intConnTo.get(currentInterest)));
				}
			}
			//System.out.println("Updated deltaT by calcdeltaTandAD(): "+connectedTimeToInterests);
			
			Iterator<String> ToUpIterator = connTo.getInterests().iterator();
			
			while(ToUpIterator.hasNext()){            
				String currentInterest = ToUpIterator.next();
				//System.out.println("currentInterest: "+currentInterest);
				intConnTo.put(currentInterest,SimClock.getTime());
				//System.out.println("intConnTo: "+intConnTo);
				timeEncounterWithInterests.put(connTo, intConnTo);
				
//				if(connectedTimeToInterests.get(currentInterest)>=0){
//					tempInterestList.put(currentInterest,SimClock.getTime());
//					}
			}
			//System.out.println("timeEncounterWithInterests: "+timeEncounterWithInterests);
			}
		} else {
			Set<String> encounterTimeToUp = timeWithInterests.keySet();
			Iterator<String> encounterTimeIterator = encounterTimeToUp.iterator();
			while(encounterTimeIterator.hasNext()){            
				String currentInterest = encounterTimeIterator.next();
				if(!connectedTimeToInterests.containsKey(currentInterest))
				{
					//System.out.println("currentInterest: "+ currentInterest +" already in delta.");
					connectedTimeToInterests.put(currentInterest, connectedTimeToInterests.get(currentInterest));
				}
			}
			//System.out.println("Updated deltaT by calcdeltaTandAD(): "+ connectedTimeToInterests);
		}
		
		updateAverageConnectedTimeToInterests();
		updateSocialWeightToInterests();
		
		/**Clear for next daily sample**/
		connectedTimeToInterests.clear();
		
		/** SEE LATER 
		 * updateImportance();
		 * */
		
		weightToInterestsCopy.put(this.getHost(),weightToInterests);
		/** SCORP */
	}


	/** Called to update the average connected time this host had 
	 *  with the different interests of encountered **/
	private void updateAverageConnectedTimeToInterests(){
		long currentday=SlotTimeCheck.getDay();
		int currentslot = SlotTimeCheck.getcurrentslot();
		Map<String,Double> currentAverageConnectedTimeToInterests = averageConnectedTimeToInterests.get(currentslot);
		Set<String> hostInterests = connectedTimeToInterests.keySet();
		Iterator<String> hostInterestIterator = hostInterests.iterator();
		
		//System.out.println("\nthis host: " + this.getHost());
		//System.out.println("Its connectedTimeToInterests: " + connectedTimeToInterests);
		//System.out.println("Its averageConnectedTimeToInterests: " + averageConnectedTimeToInterests);
			
		while(hostInterestIterator.hasNext()){
			String currentHostInterest = hostInterestIterator.next();
			double oldAD=0;
			if(currentAverageConnectedTimeToInterests.get(currentHostInterest) == null){
				oldAD=0;
			}
			else{
				oldAD=currentAverageConnectedTimeToInterests.get(currentHostInterest);
			}
			//System.out.println("old AD: " + oldAD);
			
			double newAD;
			
			if(connectedTimeToInterests.get(currentHostInterest)!=null){
				newAD = (connectedTimeToInterests.get(currentHostInterest)+(currentday-1)*oldAD);
				currentAverageConnectedTimeToInterests.put(currentHostInterest,newAD);	
			}
			else{
				newAD = (currentday-1)*oldAD;
				currentAverageConnectedTimeToInterests.put(currentHostInterest,newAD);	
			}
			//System.out.println("new AD: " + newAD);
		}
		Set<String> interestsToUp = currentAverageConnectedTimeToInterests.keySet();
		Iterator<String> interestsToUpIterator = interestsToUp.iterator();
		double newvalue = 0.0;
		while(interestsToUpIterator.hasNext()){
			String toUpdate = interestsToUpIterator.next();
			if(!hostInterests.contains(toUpdate)){
				//System.out.println("if do AD ");
				newvalue= (currentday-1)*currentAverageConnectedTimeToInterests.get(toUpdate)/currentday;
			}
			else{
				//System.out.println("else do AD");
				newvalue= currentAverageConnectedTimeToInterests.get(toUpdate)/currentday;
			}
			currentAverageConnectedTimeToInterests.put(toUpdate,newvalue);
		}
//		deltaTforImportance = connectedTimeToInterests;
		connectedTimeToInterests = new HashMap<String,Double>();
		//System.out.println("Its averageConnectedTimeToInterests after updateAverageDuration(): " + averageConnectedTimeToInterests);
		//System.out.println("Its currentAverageDurationSlot: " + currentAverageConnectedTimeToInterests);
	}


//	private void updateAverageDuration(){
//		long currentday=SlotTimeCheck.getDay();
//		int currentslot = SlotTimeCheck.getcurrentslot();
//		Map<DTNHost,Double> currentAverageDurationSlot=averageDurations.get(currentslot);
//		Set hostsinDelta = deltaT.keySet();
//		Iterator<DTNHost> deltaTHostIterator= hostsinDelta.iterator();
//		while(deltaTHostIterator.hasNext()){
//			DTNHost currenthost= deltaTHostIterator.next();
//			double oldAD=0;
//			if(currentAverageDurationSlot.get(currenthost)==null){
//				oldAD=0;
//			}
//			else{
//				oldAD=currentAverageDurationSlot.get(currenthost);
//			}
//			double newAD = (deltaT.get(currenthost)+(currentday-1)*oldAD);
//			currentAverageDurationSlot.put(currenthost,newAD);
//
//			
//		}
//		Set<DTNHost> s = currentAverageDurationSlot.keySet();
//		Iterator<DTNHost> iter=s.iterator();
//		double newvalue=0.0;
//		while(iter.hasNext()){
//			DTNHost dtnhost = iter.next();
//			if(!hostsinDelta.contains(dtnhost)){
//				newvalue= (currentday-1)*currentAverageDurationSlot.get(dtnhost)/currentday;
//			}
//			else newvalue= currentAverageDurationSlot.get(dtnhost)/currentday;
//			currentAverageDurationSlot.put(dtnhost,newvalue);
//		}
//		deltaTforImportance=deltaT;
//		deltaT=new HashMap<DTNHost,Double>();
//		
//	}

	/** Called to update the social weight of this node 
	 *  towards the different interests of encountered users **/
	private void updateSocialWeightToInterests(){
		Map<String,Double> socialWeightToInterests = new HashMap<String,Double>();
		int numberofslots = SlotTimeCheck.getnumberofslots();
		double denominator = SlotTimeCheck.getnumberofslots();
		int slotindex= SlotTimeCheck.getcurrentslot();
		for(int i=numberofslots;i>0;i--){
			if(averageConnectedTimeToInterests.get(slotindex) != null){
				Map<String, Double> currentACTTI = averageConnectedTimeToInterests.get(slotindex);
				Set<String> averageTimeToInterests = currentACTTI.keySet();
				Iterator<String> averageTimeToInterestsIterator = averageTimeToInterests.iterator();
				while(averageTimeToInterestsIterator.hasNext()){
					String currentAD = averageTimeToInterestsIterator.next();
					double currAverageduration = currentACTTI.get(currentAD);
					if(socialWeightToInterests.get(currentAD)==null){
						socialWeightToInterests.put(currentAD, 0.0);
					}
//			//		//System.out.println(""+(nextweight.get(currentHost)+(((double)i)/(SlotTimeCheck.getnormalisation()))*currAverageduration));
					// nextweight.put(currentHost, nextweight.get(currentHost)+(((double)i)/(SlotTimeCheck.getnormalisation()))*currAverageduration);
					socialWeightToInterests.put(currentAD, socialWeightToInterests.get(currentAD)+((SlotTimeCheck.getnumberofslots())/(denominator))*currAverageduration);
				}
				denominator++;
				slotindex=(slotindex+1);
				if(slotindex==SlotTimeCheck.getnumberofslots()){
					slotindex=0;
				}
			}
		}
		this.weightToInterests=socialWeightToInterests;
		//System.out.println("weightToInterests: " + socialWeightToInterests +"\n");
	}

//	private void updateWeights(){
//		Map<DTNHost,Double>nextweight = new HashMap<DTNHost,Double>();
//		int numberofslots = SlotTimeCheck.getnumberofslots();
//		double denominator = SlotTimeCheck.getnumberofslots();
//		int slotindex= SlotTimeCheck.getcurrentslot();
//		for(int i=numberofslots;i>0;i--){
//			if(averageDurations.get(slotindex)!=null){
//				Map<DTNHost,Double> currentad=averageDurations.get(slotindex);
//				Set<DTNHost> hosts= currentad.keySet();
//				Iterator<DTNHost> hostIterator=hosts.iterator();
//				while(hostIterator.hasNext()){
//					DTNHost currentHost= hostIterator.next();
//					double currAverageduration = currentad.get(currentHost);
//					if(nextweight.get(currentHost)==null){
//						nextweight.put(currentHost, 0.0);
//					}
//				nextweight.put(currentHost, nextweight.get(currentHost)+((SlotTimeCheck.getnumberofslots())/(denominator))*currAverageduration);
//				}
//				denominator++;
//				slotindex=(slotindex+1);
//				if(slotindex==24){
//					slotindex=0;
//				}
//			}		
//		}
//		this.weights=nextweight;
//	}
	


//	private void updateImportance(){
//		int nrofneighbours=deltaTforImportance.size();
//		double sumofweights=0;
//		Set<DTNHost>set =deltaTforImportance.keySet();
//		Iterator<DTNHost> it= set.iterator();
//		while(it.hasNext()){
//			DTNHost ho=it.next();
//			sumofweights=sumofweights+weights.get(ho);
//			
//		}
//		Set<DTNHost> deltahosts = deltaTforImportance.keySet();
//		Iterator<DTNHost> iter= deltahosts.iterator();
//		double newimportance=0;
//		
//		while(iter.hasNext()){
//			DTNHost host=iter.next();
//			newimportance = newimportance+(weights.get(host)*importancemap.get(host))/(nrofneighbours);
//		}
//		this.importance=0.2+0.8*newimportance;
//		importCopy.put(this.getHost(), this.importance);
//	}

//	public double getImportance(){
//		return importance;
//	}
	
//	public Map<DTNHost, Double> getWeights() {
//			return this.weights;
//	}
	public Map<String, Double> getweightToInterests() {
	//	ageDeliveryPreds(); // make sure the aging is done
		return this.weightToInterests;
	}











	
	protected void doExchange(Connection con, DTNHost otherHost)
	{
		conStates.put(con, 1);
		decider.doExchangeForNewConnection(con, otherHost);
	}
	
	/**
	 * Called by a peer DecisionEngineRouter to indicated that it already 
	 * performed an information exchange for the given connection.
	 * 
	 * @param con Connection on which the exchange was performed
	 */
	protected void didExchange(Connection con)
	{
		conStates.put(con, 1);
	}
	
	@Override
	protected int startTransfer(Message m, Connection con)
	{
		int retVal;
		
		if (!con.isReadyForTransfer()) {
			return TRY_LATER_BUSY;
		}
		
		retVal = con.startTransfer(getHost(), m);
		if (retVal == RCV_OK) { // started transfer
			addToSendingConnections(con);
		}
		else if(tombstoning && retVal == DENIED_DELIVERED)
		{
			this.deleteMessage(m.getId(), false);
			tombstones.add(m.getId());
		}
		else if (deleteDelivered && (retVal == DENIED_OLD || retVal == DENIED_DELIVERED) && 
				decider.shouldDeleteOldMessage(m, con.getOtherNode(getHost()))) {
			/* final recipient has already received the msg -> delete it */
			this.deleteMessage(m.getId(), false);
		}
		
		return retVal;
	}

	@Override
	 public int receiveMessage(Message m, DTNHost from){
		int recvCheck = checkReceiving(m); 
		if (recvCheck != RCV_OK) {
			return recvCheck;
		}
		if(isDeliveredMessage(m) || (tombstoning && tombstones.contains(m.getId())))
			return DENIED_DELIVERED; 
		
	 return super.receiveMessage(m, from);
	 }


	@Override
	public Message messageTransferred(String id, DTNHost from)
	{
		Message incoming = removeFromIncomingBuffer(id, from);
	
		if (incoming == null) {
			throw new SimError("No message with ID " + id + " in the incoming "+
					"buffer of " + getHost());
		}
		
		incoming.setReceiveTime(SimClock.getTime());
		
		Message outgoing = incoming;
		for (Application app : getApplications(incoming.getAppID())) {
			// Note that the order of applications is significant
			// since the next one gets the output of the previous.
			outgoing = app.handle(outgoing, getHost());
			if (outgoing == null) break; // Some app wanted to drop the message
		}
		
		Message aMessage = (outgoing==null)?(incoming):(outgoing);
		
		boolean isFinalRecipient = decider.isFinalDest(aMessage, getHost(), 
				getHost().getInterests().contains(aMessage.getContentType()));
		boolean isFirstDelivery =  isFinalRecipient && 
			!isDeliveredMessage(aMessage);
		
		if (outgoing!=null && decider.shouldSaveReceivedMessage(aMessage, getHost())) 
		{
			// not the final recipient and app doesn't want to drop the message
			// -> put to buffer
			addToMessages(aMessage, false);
			
			// Determine any other connections to which to forward a message
			findConnectionsForNewMessage(aMessage, from);
		}
		
		if (isFirstDelivery)
		{
			this.deliveredMessages.put(id, aMessage);
		}
		
		for (MessageListener ml : this.mListeners) {
			ml.messageTransferred(aMessage, from, getHost(),
					isFirstDelivery);
		}
		
		return aMessage;
	}

	@Override
	protected void transferDone(Connection con)
	{
		Message transferred = this.getMessage(con.getMessage().getId());
		
		for(Iterator<Tuple<Message, Connection>> i = outgoingMessages.iterator(); 
		i.hasNext();)
		{
			Tuple<Message, Connection> t = i.next();
			if(t.getKey().getId().equals(transferred.getId()) && 
					t.getValue().equals(con))
			{
				i.remove();
				break;
			}
		}
		
		if(decider.shouldDeleteSentMessage(transferred, con.getOtherNode(getHost()), getHost()))
		{
			this.deleteMessage(transferred.getId(), false);
			
			
		}
	}

	@Override
	public void update(){
		super.update();

		/* time to do a TTL check and drop old messages? Only if not sending */
		if (SimClock.getTime() - lastTtlCheck >= TTL_CHECK_INTERVAL && 
				sendingConnections.size() == 0) {
			dropExpiredMessages();
			lastTtlCheck = SimClock.getTime();
		}

		if (!canStartTransfer() || isTransferring()) {
			return; // nothing to transfer or is currently transferring 
		} 

		tryMessagesForConnected(outgoingMessages); 

		for(Iterator<Tuple<Message, Connection>> i = outgoingMessages.iterator(); i.hasNext();){
			Tuple<Message, Connection> t = i.next();
			if(!this.hasMessage(t.getKey().getId())){
				i.remove();
			}
		}
	 }
	
	@Override
	public void deleteMessage(String id, boolean drop)
	{
		super.deleteMessage(id, drop);
		
		for(Iterator<Tuple<Message, Connection>> i = outgoingMessages.iterator(); 
		i.hasNext();)
		{
			Tuple<Message, Connection> t = i.next();
			if(t.getKey().getId().equals(id))
			{
				i.remove();
			}
		}
	}

	public RoutingDecisionEngine getDecisionEngine()
	{
		return this.decider;
	}

	protected boolean shouldNotifyPeer(Connection con)
	{
		Integer i = conStates.get(con);
		return i == null || i < 1;
	}
	
	protected void findConnectionsForNewMessage(Message m, DTNHost from)
	{
		for(Connection c : getConnections())
		{
			DTNHost other = c.getOtherNode(getHost());
			if(other != from && decider.shouldSendMessageToHost(m, other, getHost()))
			{
				outgoingMessages.add(new Tuple<Message, Connection>(m, c));
			}
		}
	}
}
