レポート6B

@@@ 1810678 山田朔也 (個人作業)




選択した課題1: 演習3_b
    末尾再帰でない1次元の再帰関数である関数powxを
    累積引数を使って使って末尾再帰に変形し、さらに再帰を除去する。
    また、元の関数と変換した関数を実行し、確認する。

方針1:
    指示にあるように、与えられた関数powxを作業的に変換する。
    その際気をつけることとして、returnの箇所で掛けられる値を累積引数に掛けて
    末尾再帰に直す。また、累積引数を使用するため変数が増えることとなる。
    そのため、事前に引数を増やすための関数を末尾再帰でもループでも用意しておく。

コード1:
-------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

//#define FACT
//#define MUL
#define POWX
//#define EXPOWX

int fact(int n) {
    if(n < 1) {
        return 1;
    } else {
        return n * fact(n-1);
    }
}

int fact1(int n, int r) {
    if(n < 1) {
        return r;
    } else {
        return fact1(n-1, r*n);
    }
}

int fact_1(int n) { return fact1(n, 1); }

int mul(int a, int b) {
    if(b == 0) {
        return 0;
    } else {
        return a + mul(a, b-1);
    }
}

int mul1(int a, int b, int r) {
    if(b == 0) {
        return r;
    } else {
        return mul1(a, b-1, r+a);
    }
}

int mul_1(int a, int b) { return mul1(a, b, 0); }

int mul2(int a, int b, int r) {
    while(true) {
        if(b == 0) {
            return r;
        } else {
            b -= 1;
            r += a;
        }
    }
}

int mul_2(int a, int b) { return mul2(a, b, 0); }

int powx(double x, int n) {
    if(n < 1) {
        return 1.0;
    } else {
        return x * powx(x, n-1);
    }
}

int powx1(double x, int n, double r) {
    if(n < 1) {
        return r;
    } else {
        return powx1(x, n-1, r*x);
    }
}

int powx_1(double x, int n) { return powx1(x, n, 1.0); }

int powx2(double x, int n, double r) {
    while(true) {
        if(n < 1) {
            return r;
        } else {
            n--;
            r *= x;
        }
    }
}

int powx_2(double x, int n) { return powx2(x, n, 1.0); }

double expowx(double x, int n) {
    if(n < 1) {
        return 1.0;
    } else if(n % 2 == 1) {
        return x * expowx(x, n-1);
    } else {
        double y = expowx(x, n/2);
        return y*y;
    }
}

double expowx1(double x, int n, double r) {
    if(n < 1) {
        return r;
    } else if(n % 2 == 1) {
        return expowx1(x, n-1, r*x);
    } else {
        return expowx1(x*x, n/2, r);
    }
}

double expowx_1(double x, int n) { return expowx1(x, n, 1.0); }

double expowx2(double x, int n, double r) {
    while(true) {
        if(n < 1) {
            return r;
        } else if(n % 2 == 1) {
            n--;
            r *= x;
        } else {
            n /= 2;
            x *= x;
        }
    }
}

double expowx_2(double x, int n) { return expowx2(x, n, 1.0); }

//========================================================================
int main(int argv, char *args[]) {
#ifdef FACT
    int n = atoi(args[1]);
    printf("再帰で記述: %d\n末尾再帰で記述: %d\n", fact(n), fact_1(n));
#endif
#ifdef MUL
    int a = atoi(args[1]), b = atoi(args[2]);
    printf("再帰で記述: %d\n末尾再帰で記述: %d\nループで記述: %d\n", mul(a, b), mul_1(a, b), mul_2(a, b));
#endif
#ifdef POWX
    double x = atof(args[1]);
    int n = atoi(args[2]);
    printf("再帰で記述: %d\n末尾再帰で記述: %d\nループで記述: %d\n", powx(x, n), powx_1(x, n), powx_2(x, n));
#endif
#ifdef EXPOWX
    double x = atof(args[1]);
    int n = atoi(args[2]);
    printf("再帰で記述: %f\n末尾再帰で記述: %f\nループで記述: %f\n", expowx(x, n), expowx_1(x, n), expowx_2(x, n));
#endif
//    printf("%", expowx())
    return 0;
}
-------------------------------------------------------------------------------

実行例1:
-------------------------------------------------------------------------------
    [y1810678@red99 06]$ ./a.out 2 10
    再帰で記述: 1024
    末尾再帰で記述: 1024
    ループで記述: 1024
-------------------------------------------------------------------------------

解説1:
    まず、この関数powxは実数xと非負整数nを受け取り、x^nを返す関数である。
    今回掲載したファイルの中には使わない関数も多数ある。それで実行する際に必要なものを
    この解説で明記する。実行に必要な関数はpowx, powx1, powx_1, powx2, powx_2, mainの
    ５つである。
    次にそれぞれの関数の動きを説明する。
    ---------------------------------------------------------------------------
    powx: これは問題として与えられた関数。仕様は上記のものである。
    powx1: これは関数powxを累積引数rを用いて末尾再帰の関数に変換したものである。
    powx_1: これは関数powx1の変数の増加に対応するための関数である。
    powx2: これは関数powxをループを用いた関数に変換したものである。
    powx_2: これは関数powx2の変数増加に対応するための関数である。
    ---------------------------------------------------------------------------
    また、main関数では、コマンドライン引数を用いて入力受け取る。
    それをそれぞれ関数powx, powx_1, powx_2に渡すことによって実行されている。

考察1:
    この課題を通して再帰関数をループ関数に直すことができた。
    ただし、今回の課題の関数に限らず他の課題でも同様であるが、
    再帰関数をループを用いた関数に戻す際にコードの記述量が多くなっていっている。
    また、累積引数を用いている段階で、問題として提示された段階の関数よりも
    引数が増えている。
    以上のことから再帰関数をループを用いた関数に変換する際にコードが
    より読みづらくならざるをえない。
    再帰関数に慣れ親しみ、その挙動をしっかりと想像することができる
    エンジニアなどは、再帰関数の方が可読性が高いと感じるだろう。



選択した課題2: 演習5_a
    与えられたプログラムの再帰をスタックを用いて削除する。
    この課題では、12減少列のプログラムである。

方針2:
    まず、再帰版を実行してためし、挙動を確認する。
    次にスタックを用意する。その際に、スタックは再帰関数で使用していた
    引数を格納できるように、新たな関数をpush用として作成しておく。
    そのスタックに積み重ねられている分だけループを実行し、
    スタックが空になったら終了するようにしている。

コード2:
-------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "istack.h"

//#define RECUR
#define STACK

void decr12(int n, int k, int *a) {
    if(n < 1) {
        // do nothing
    } else if(n == 1) {
        a[k] = 1;
        int i;
        for(i = 0; i <= k; ++i) {
            printf(" %d", a[i]);
        }
        printf("\n");
    } else {
        a[k] = n;
        decr12(n-1, k+1, a);
        decr12(n-2, k+1, a);
    }
}

void p2(istackp s, int n, int k) {
    istack_push(s, n);
    istack_push(s, k);
}

void decr12_loop(int n, int k, int *a) {
    istackp s = istack_new(100);
    p2(s, n, k);
    while(!istack_isempty(s)) {
        k = istack_pop(s);
        n = istack_pop(s);
        if(n < 1) {
            // do nothing
        } else if(n == 1) {
            a[k] = 1;
            for(int i = 0; i <= k; ++i) {
                printf(" %d", a[i]);
            }
            printf("\n");
        } else {
            a[k] = n;
            p2(s, n-2, k+1);
            p2(s, n-1, k+1);
        }
    }
}

int main(int argc, char *argv[]) {
    int buf[100];
#ifdef RECUR
    decr12(atoi(argv[1]), 0, buf);
#endif
#ifdef STACK
    decr12_loop(atoi(argv[1]), 0, buf);
#endif
    return 0;
}
-------------------------------------------------------------------------------

実行例2:
再帰でもループでも実行結果は変化しないので、ここでは
ループで実行したもののみ掲載。
-------------------------------------------------------------------------------
[y1810678@red99 06]$ ./a.out 5
 5 4 3 2 1
 5 4 3 1
 5 4 2 1
 5 3 2 1
 5 3 1
-------------------------------------------------------------------------------

解説2:
    今回作成した関数decr12_loopの解説をしていく。
    この関数はまず引数として変数n, kと配列aを持っている。
    変数nはコマンドライン引数で受け取った数値である。
    変数kは配列aの次に代入する位置を記憶しておくものである。
    配列aはnを保存しておくものである。
    本来ならば再帰でnの値を更新するのだが、ここではそれはできない。
    なので、スタックに更新されたnの値を積んでいき、
    ループの最初に積まれたnを一旦取り出して処理をしている。
    ここで、nの値が1ならばaの中身を表示し、nが1未満になってしまったら、
    それは失敗ということで放置。
    kの値はそれに応じて変化させている。

考察2:
    この課題及び、課題1からおおよその再帰関数はループにて表現できることがわかった。
    また、これは個人的な感覚だが、やはりループにて表現できて可読性が著しく低くなければ
    ループにて表現するべきだと考えられる。
    理由としては主に2つ。
    1つ目は再帰関数はメモリの使用量が大きいと予想されるからである。
    再帰の回数や、関数の引数が大きければ大きいほどメモリ領域は圧迫されていくため
    その節約を図るならばやはりループが最適だと思われる。
    2つ目はループを用いた表現の方が一般的にイメージをしやすいという点である。
    プログラミングする上で一番重要なのは可読性のため、イメージしやすく
    軽量なアルゴリズムを構築することは重要なのではないかと考えられる。




アンケート: アンケート再掲+回答
Q1. 末尾再帰に対する再帰除去ができるようになりましたか。
    A1. できるようになった。これに関しては資料等も見ずにできるようになった気がする。
Q2. スタックを用いた再帰除去ができるようになりましたか。
    A2. できるようになった。ただ、やはりただの末尾再帰関数よりも数段やりづらいと感じた。
Q3. リフレクション(今回の課題で分かったこと)・感想・要望をどうぞ
    A3 今回は通常よりも倍、提出まで猶予があったため大方の課題が解けて満足できた。
