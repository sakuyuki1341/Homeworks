レポート9A

@@@ 1810678 山田朔也 (個人作業)

選択した課題: 演習1_a
    積集合(intersection)の演算を作る。

方針:
    二重ループを用いて、各集合の中身を確かめていき、
    一致している元のみで要素を構成された集合を返す。

コード:
---------------------------------------------------------------------
// iset_1.c
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "iset.h"
#define MAXARRAY 10000
struct iset { int size, *a; };

isetp iset_new() {
    isetp s = (isetp)malloc(sizeof(struct iset));
    s->size = 0; s->a = (int*)malloc(sizeof(int)*MAXARRAY);
    return s;
}

void iset_free(isetp s) { free(s->a); free(s); }

static int isin1(isetp s, int e) {
    for(int i = 0; i < s->size; ++i) {
        if(s->a[i] == e) { return i; }
    }
    return -1;
}

bool iset_isempty(isetp s) { return s->size == 0; }

bool iset_isin(isetp s, int e) { return isin1(s, e) >= 0; }

static int max2(int a, int b) { return (a > b) ? a : b; }

int iset_max(isetp s) {
    int max = 0;
    for(int i = 0; i < s->size; ++i) { max = max2(max, s->a[i]); }
    return max;
}

void iset_addelt(isetp s, int e) {
    if(iset_isin(s, e) || s->size >= MAXARRAY-1) { return; }
    s->a[(s->size)++] = e;
}

void iset_subelt(isetp s, int e) {
    int i = isin1(s, e); if(i < 0) { return; }
    s->a[i] = s->a[--(s->size)];
}

isetp iset_union(isetp s, isetp t) {
    isetp u = iset_new();
    for(int i = 0; i < s->size; ++i) { iset_addelt(u, s->a[i]); }
    for(int i = 0; i < t->size; ++i) {
        if(!iset_isin(s, t->a[i])) { iset_addelt(u, t->a[i]); }
    }
    return u;
}

isetp iset_intersection(isetp s, isetp t) {
    isetp i = iset_new();
    for(int j = 0; j < s->size; j++) {
        for(int k = 0; k < t->size; k++) {
            if(s->a[j] == t->a[k]) {
                iset_addelt(i, s->a[j]);
            }
        }
    }
    return i;
}
---------------------------------------------------------------------
---------------------------------------------------------------------
// iset.h
#include <stdbool.h>

struct iset;
typedef struct iset *isetp;

isetp iset_new();                 // create empty set
void iset_free(isetp s);          // free memory
bool iset_isempty(isetp s);       // test emptiness
bool iset_isin(isetp s, int e);   // e included in s?
int iset_max(isetp s);            // return max value
void iset_addelt(isetp s, int e); // add e to s
void iset_subelt(isetp s, int e); // remove e from s
isetp iset_union(isetp s, isetp q); // set union
isetp iset_intersection(isetp s, isetp t); // set intersection
---------------------------------------------------------------------
---------------------------------------------------------------------
// test_iset.c
#include <stdbool.h>
#include <stdio.h>
#include "iset.h"

//#define ENSHU_EX
#define ENSHU_1

void expect_iset(isetp s, int m, int n, int a[], char *msg) {
    bool ok = true; int p = 0;
    for(int i = 0; i <= m; ++i) {
        if(p < n && i == a[p]) {
            ++p;
            if(!iset_isin(s, i)) { printf(" NG: %d not in set.\n", i); ok = false; }
        } else {
            if(iset_isin(s, i)) { printf(" NG: %d in set.\n", i); ok = false; }
        }
    }
    printf("%s %s\n", ok?"OK":"NG", msg);
}

int main(void) {
#ifdef  ENSHU_EX
    int a[] = { 1, 3, 5, 7 };
    isetp s = iset_new();
    iset_addelt(s, 1); iset_addelt(s, 3); iset_addelt(s, 5);
    expect_iset(s, 9, 3, a, "initial: { 1 3 5 }"); iset_subelt(s, 1);
    expect_iset(s, 9, 2, a+1, "- { 1 }: { 3 5 }");
    isetp q = iset_new(); iset_addelt(s, 7); iset_addelt(s, 5);
    isetp r = iset_union(s, q);
    expect_iset(r, 9, 3, a+1, "+ { 7 5 }: { 3 5 7 }");
    iset_free(s); iset_free(q); iset_free(r);
#endif
#ifdef ENSHU_1
    int a[] = { 1, 3 };
    isetp s = iset_new();
    iset_addelt(s, 1); iset_addelt(s, 3); iset_addelt(s, 5);
    isetp t = iset_new();
    iset_addelt(t, 1); iset_addelt(t, 2); iset_addelt(t, 3);
    isetp r = iset_intersection(s, t);
    expect_iset(r, 9, 2, a, "{ 1 3 }");
    iset_free(s); iset_free(t); iset_free(r);
#endif
    return 0;
}
---------------------------------------------------------------------

実行例:
---------------------------------------------------------------------
$ ./a.exe
OK { 1 3 }
---------------------------------------------------------------------

解説:
    まず、iset_1.cにて関数iset_intersectionを作成する。
    この関数は受け取った２つの集合の積集合を返す関数で、
    2つの集合の元をそれぞれ比較し、一致した元があれば
    それを返す用の集合である、集合iに追加する。
    単体テストは、集合{1,3,5}と集合{1,2,3}を用意し
    その２つの集合を用いて積集合を返す関数の確かめを
    行っている。

レビュー課題:
    for文を2つではなく、一つで実装する方がキレイに書けるのではないか。

考察:
    今回作成した関数iset_intersectionはfor文を二重にして
    作成されているが、仮に関数iset_isinを用いても計算量
    はあまり変わらないのではないか。

アンケート:
    Q1.抽象データ型の概念と整数集合の実装方法を最低1つ理解しましたか。
    A1.概念の理解と、実装方法の理解もできた。
    Q2.乱数の生成方法と時間の計測方法が分かりましたか。
    A2.生成方法と時間の計測方法も分かった、pcは時間計測が簡単で良いと思った。
    Q3.リフレクション(今回の課題で分かったこと)・感想・要望をどうぞ。
    A3.今回はそこまで難しい内容でなくて比較的に理解が楽であった。
