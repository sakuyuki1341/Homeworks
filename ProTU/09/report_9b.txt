レポート9B

@@@ 1810678 山田朔也 (個人作業)



選択した課題1: 演習1_b
    差集合(difference)の演算を作る。

方針1:
    ループを用いて、引かれる側の集合の要素が引く側に存在するかどうかを
    確かめ、存在しない要素をまとめて返す。

コード1:
---------------------------------------------------------------------
// iset_1.c
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "iset.h"
#define MAXARRAY 10000
struct iset { int size, *a; };

isetp iset_new() {
    isetp s = (isetp)malloc(sizeof(struct iset));
    s->size = 0; s->a = (int*)malloc(sizeof(int)*MAXARRAY);
    return s;
}

void iset_free(isetp s) { free(s->a); free(s); }

static int isin1(isetp s, int e) {
    for(int i = 0; i < s->size; ++i) {
        if(s->a[i] == e) { return i; }
    }
    return -1;
}

bool iset_isempty(isetp s) { return s->size == 0; }

bool iset_isin(isetp s, int e) { return isin1(s, e) >= 0; }

static int max2(int a, int b) { return (a > b) ? a : b; }

int iset_max(isetp s) {
    int max = 0;
    for(int i = 0; i < s->size; ++i) { max = max2(max, s->a[i]); }
    return max;
}

void iset_addelt(isetp s, int e) {
    if(iset_isin(s, e) || s->size >= MAXARRAY-1) { return; }
    s->a[(s->size)++] = e;
}

void iset_subelt(isetp s, int e) {
    int i = isin1(s, e); if(i < 0) { return; }
    s->a[i] = s->a[--(s->size)];
}

isetp iset_union(isetp s, isetp t) {
    isetp u = iset_new();
    for(int i = 0; i < s->size; ++i) { iset_addelt(u, s->a[i]); }
    for(int i = 0; i < t->size; ++i) {
        if(!iset_isin(s, t->a[i])) { iset_addelt(u, t->a[i]); }
    }
    return u;
}

isetp iset_intersection(isetp s, isetp t) {
    isetp i = iset_new();
    for(int j = 0; j < s->size; j++) {
        for(int k = 0; k < t->size; k++) {
            if(s->a[j] == t->a[k]) {
                iset_addelt(i, s->a[j]);
            }
        }
    }
    return i;
}

/*========================================================*
 * 関数iset_difference(isetp s, isetp t): 集合sから集合t
 * を引いた集合dを返す
 *========================================================*/
isetp iset_difference(isetp s, isetp t) {
    isetp d = iset_new();
    for(int i = 0; i < s->size; i++) {
        if(!iset_isin(t, s->a[i])) {
            iset_addelt(d, s->a[i]);
        }
    }
    return d;
}

isetp iset_exclusive_or(isetp s, isetp t) {
    isetp e1 = iset_new(); isetp e2 = iset_new();
    e1 = iset_difference(s, t); e2 = iset_difference(t, s);
    return iset_union(e1, e2);
}
---------------------------------------------------------------------
---------------------------------------------------------------------
// iset.h
#include <stdbool.h>

struct iset;
typedef struct iset *isetp;

isetp iset_new();                 // create empty set
void iset_free(isetp s);          // free memory
bool iset_isempty(isetp s);       // test emptiness
bool iset_isin(isetp s, int e);   // e included in s?
int iset_max(isetp s);            // return max value
void iset_addelt(isetp s, int e); // add e to s
void iset_subelt(isetp s, int e); // remove e from s
isetp iset_union(isetp s, isetp q); // set union
isetp iset_intersection(isetp s, isetp t); // set intersection
isetp iset_difference(isetp s, isetp t); // set difference
isetp iset_exclusive_or(isetp s, isetp t); // set exclusive_or
---------------------------------------------------------------------
---------------------------------------------------------------------
// test_iset.c
#include <stdbool.h>
#include <stdio.h>
#include "iset.h"

//#define ENSHU_EX
//#define ENSHU_1
#define ENSHU_2

void expect_iset(isetp s, int m, int n, int a[], char *msg) {
    bool ok = true; int p = 0;
    for(int i = 0; i <= m; ++i) {
        if(p < n && i == a[p]) {
            ++p;
            if(!iset_isin(s, i)) { printf(" NG: %d not in set.\n", i); ok = false; }
        } else {
            if(iset_isin(s, i)) { printf(" NG: %d in set.\n", i); ok = false; }
        }
    }
    printf("%s %s\n", ok?"OK":"NG", msg);
}

int main(void) {
#ifdef  ENSHU_EX
    int a[] = { 1, 3, 5, 7 };
    isetp s = iset_new();
    iset_addelt(s, 1); iset_addelt(s, 3); iset_addelt(s, 5);
    expect_iset(s, 9, 3, a, "initial: { 1 3 5 }"); iset_subelt(s, 1);
    expect_iset(s, 9, 2, a+1, "- { 1 }: { 3 5 }");
    isetp q = iset_new(); iset_addelt(s, 7); iset_addelt(s, 5);
    isetp r = iset_union(s, q);
    expect_iset(r, 9, 3, a+1, "+ { 7 5 }: { 3 5 7 }");
    iset_free(s); iset_free(q); iset_free(r);
#endif
#ifdef ENSHU_1
    int a[] = { 1, 3 };
    isetp s = iset_new();
    iset_addelt(s, 1); iset_addelt(s, 3); iset_addelt(s, 5);
    isetp t = iset_new();
    iset_addelt(t, 1); iset_addelt(t, 2); iset_addelt(t, 3);
    isetp r = iset_intersection(s, t);
    expect_iset(r, 9, 2, a, "{ 1 3 }");
    iset_free(s); iset_free(t); iset_free(r);
#endif
#ifdef ENSHU_2
    int a[] = { 5 };
    isetp s = iset_new();
    iset_addelt(s, 1); iset_addelt(s, 3); iset_addelt(s, 5);
    isetp t = iset_new();
    iset_addelt(t, 1); iset_addelt(t, 2); iset_addelt(t, 3);
    isetp r = iset_difference(s, t);
    expect_iset(r, 9, 1, a, "{ 5 }");
    iset_free(s); iset_free(t); iset_free(r);
#endif
    return 0;
}
---------------------------------------------------------------------

実行例1:
---------------------------------------------------------------------
$ ./a.exe
OK { 5 }
---------------------------------------------------------------------

解説1:
    まず、今回の課題で作成した関数iset_differenceの解説からしていく。
    この関数は、引数として受け取った集合sから集合tを引いた集合dを
    返す。
    内部の計算では、まず集合dを作成し、集合sの要素で集合tに含まれていない
    ものを集合dに追加していき、最後に集合dを返している。

考察1:
    今回差集合の演算を作成する上で既に作成している関数を使用することにより
    多少見やすく記述することができたと思われる。



選択した課題2: 演習3_a
    サイコロを6000回振ってそれぞれの目が何回出たかを表示するプログラムを作成する。

方針2:
    各目のでた数を保存しておく配列を作成し、サイコロを振る。
    最後にその配列の中身を順次表示するようにする。

コード2:
---------------------------------------------------------------------
// rand_3a.c
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main(int argc, char *argv[]) {
    int p[6] = {0};
    for(int i = 0; i < 6000; i++) {
        p[rand() % 6]++;
    }
    for(int i = 0; i < 6; i++) {
        printf("%d: %d times\n", i+1, p[i]);
    }
  return 0;
}
---------------------------------------------------------------------

実行例2:
---------------------------------------------------------------------
$ ./a.exe
1: 1003 times
2: 1017 times
3: 983 times
4: 994 times
5: 1004 times
6: 999 times
---------------------------------------------------------------------

解説2:
    基本的には方針で記述したことに沿っている。
    まず、サイコロを振って出た目のそれぞれの回数を保存する配列としてpを宣言。
    その後、サイコロを6000回振る。最後に配列pの中身を表示し、終了している。

考察2:
    今回、rand関数の値を１度保存し、その値によって分岐させる処理ではなく、
    配列の番数にrand関数を用いて計算させている。これによってわざわざ
    switchを使用せずに配列の値を増やせており、非常に短く記述することができたと
    思われる。



アンケート:
    Q1.ビットマップを用いた整数集合の実現方法を理解しましたか。
    A1.理解した、面白い方法だと感じた。
    Q2.必要に応じて配列サイズを拡張できるようになりましたか。
    A2.できるようになった。また、C言語はサイズ拡張などの制限が多く不便に感じた
    Q3.リフレクション(今回の課題で分かったこと)・感想・要望をどうぞ。
    A3.今回の内容は簡単目に感じた。
