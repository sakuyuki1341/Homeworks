レポート14A

@@@ 1810678 山田朔也 (個人作業)

選択した課題: 演習1_a
    3のn乗の計算を、メモ化していない物とメモ化した物で計算をし、結果と時間を比較する。

方針:
    提示されたコードのメモ化したものを作成する。
    その次にそれらを実際に動かすと同時に時間計測をそれぞれ行う。
    最後にそれらの結果を表示する。

コード:
---------------------------------------------------------------------
// pow3.c --- calcurate pow3 with memoization and not memoization.
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ARRSIZE 100

int pow3(int n) {
    if(n <= 0) {
        return 1;
    }
    return pow3(n-1) + pow3(n-1) + pow3(n-1);
}

int pow3_1(int n) {
    static int memo[ARRSIZE];
    if(memo[n] != 0) {
        return memo[n];
    }
    int r = 1;
    if(n >= 1) {
        r = pow3_1(n-1) + pow3_1(n-1) + pow3_1(n-1);
    }
    memo[n] = r;
    return r;
}

int main(int argc, char *argv[]) {
    int n = atoi(argv[1]);
    struct timespec tm1, tm2, tm3, tm4;
    clock_gettime(CLOCK_REALTIME, &tm1);
    int not_usememo = pow3(n);
    clock_gettime(CLOCK_REALTIME, &tm2);
    clock_gettime(CLOCK_REALTIME, &tm3);
    int usememo = pow3_1(n);
    clock_gettime(CLOCK_REALTIME, &tm4);
    double not_usedt = (tm2.tv_sec-tm1.tv_sec) + 1e-9*(tm2.tv_nsec-tm1.tv_nsec);
    printf("not_usememo: pow3(%d)=%d, time=%.4f\n", n , not_usememo, not_usedt);
    double usedt = (tm4.tv_sec-tm3.tv_sec) + 1e-9*(tm4.tv_nsec-tm3.tv_nsec);
    printf("usememo: pow3(%d)=%d, time=%.4f\n", n , usememo, usedt);
    return 0;
}
---------------------------------------------------------------------

実行例:
---------------------------------------------------------------------
$ ./a.out 10
not_usememo: pow3(10)=59049, time=0.0002
usememo: pow3(10)=59049, time=0.0000
$ ./a.out 20
not_usememo: pow3(20)=-808182895, time=8.6530
usememo: pow3(20)=-808182895, time=0.0000
---------------------------------------------------------------------

解説:
    まず、関数pow3が提示されたメモ化されていない3のn乗の計算のコードとなる。
    それをメモ化したものが関数pow3_1となっている。関数pow3_1の中では、配列に格納されている計算結果が存在していればそれを用い、
    存在していれば一つ前から引用したもので計算した後、配列に格納していく物となっている。
    main関数では、時間計測用の構造体を4つ作成し、これらを利用してメモ化していない場合としている場合の経過時間を測っている。
    関数pow3と関数pow3_1の計算結果と、そのかかった時間をそれぞれ表示し、終了となっている。

レビュー課題:
    良くかけてました。

考察:
    この実行例から分かるように、入力されるnの値が10程度であれば2つの違いは大きくないが、20くらいになると体感として十二分に分かる程度に違いが生じ始める。
    また、メモ化している場合では10でも20でもほとんど実行時間に差がなく、非常に素早く計算を完了していることが分かる。

アンケート:
    Q1.この授業開始時の自分と現在の自分を比べてどのような変化があったと思いますか。
    A1.少なくともコーディングに掛かる時間は大幅に減少したと言える。また、それを支えるアルゴリズムを駆使する…とまでは言えないが多少なりとは使えるようにはなったと思っている。
    Q2.「プログラミングができる」ようになるためにはどのように学ぶ(教わる)のがよいと考えますか。
    A2.やはり、他の人に教わるだけでなく、自分で様々な課題を様々な方法で解決していくことが一番重要だと思う。
    Q3.リフレクション(今回の課題で分かったこと)・感想・要望をどうぞ
    A3.動的計画法を用いる事によって計算の高速化ができ、これらをどれほど利用できるかが重要だと思われる。
