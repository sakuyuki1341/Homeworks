レポート12A

@@@ 1810678 山田朔也 (個人作業)

選択した課題: 演習2-a
    2進表現で基数ソートを用い、下の桁から並べるプログラムを作成する。

方針:
    2進数なので一桁に含まれる数は0,1しか存在しない。
    そのため、0,1をそれぞれ別の配列に格納してそれを元の配列に戻す。
    これを全ての桁に実行して基数ソートを実装する。

コード:
---------------------------------------------------------------------
// enshu2.c
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAXDATA 1000000

static int a[MAXDATA];

static void swap(int *a, int i, int j) {
    int x = a[i]; a[i] = a[j]; a[j] = x;
}

static void rs1(int *a, int i, int j, int mask) {
    if(i >= j || mask == 0) { return; }
    int k, s;
    for(s = k = i; k <= j; ++k) {
        if((a[k]&mask) == 0) { swap(a, s++, k); }
    }
    rs1(a, i, s-1, mask/2); rs1(a, s, j, mask/2);
}

static void rs2(int *a, int n) {
    int maxmask = MAXDATA;
    int ac = 0;
    int *b = (int*)(malloc(sizeof(int)*n)); int bc = 0;
    int *c = (int*)(malloc(sizeof(int)*n)); int cc = 0;
    for(int mask = 1; mask < maxmask; mask *= 2) {
        bc = 0; cc = 0; ac = 0;
        for(int i = 0; i < n; ++i) {
            if((a[i]&mask) == 0) {
                b[bc++] = a[i];
            } else {
                c[cc++] = a[i];
            }
        }
        for(int i = 0; i < bc; i++) {
            a[ac++] = b[i];
        }
        for(int i = 0; i < cc; i++) {
            a[ac++] = c[i];
        }
    }
}

void radixsort1(int n, int *a) { rs1(a, 0, n-1, 0x40000000); }

void radixsort2(int n, int *a) { rs2(a, n); }

int makearr();

int main(int argc, char const *argv[]) {
    if(!(argc == 2 && argv[1] > 0)) {
        printf("並び替える数の量を指定してください\n");
        return 0;
    }

    int n = atoi(argv[1]);
    srand(time(NULL));
    struct timespec tm1, tm2;

    for(int i = 0; i < n; ++i) { a[i] = rand()%10000; }

    clock_gettime(CLOCK_REALTIME, &tm1);
    radixsort2(n, a);
    clock_gettime(CLOCK_REALTIME, &tm2);
    for(int i = 0; i < n; ++i) { printf(" %d", a[i]); }
    printf("\n");
    double dt = (tm2.tv_sec-tm1.tv_sec) + 1e-9*(tm2.tv_nsec-tm1.tv_nsec);
    printf("time = %.4f\n", dt);
    return 0;
}
---------------------------------------------------------------------

実行例:
---------------------------------------------------------------------
[y1810678@red99 12]$ ./a.out 1000
 2 12 38 45 47 92 92 107 111 138 143 192 195 205 226 231 240 241 252 254 255 256 256 263 269 274 282 297 315 323 327 334 338 364 374 387 389 396 407 409 415 417 423 429 429 435 459 468 487 494 496 502 508 523 527 543 550 553 554 559 565 568 569 584 601 609 611 615 631 643 656 659 676 676 696 723 725 725 727 731 746 769 772 792 792 798 805 811 813 820 830 843 883 900 922 931 956 965 976 986 989 998 1004 1005 1007 1047 1050 1064 1066 1067 1068 1069 1071 1073 1076 1079 1083 1084 1086 1088 1108 1110 1122 1131 1132 1144 1154 1179 1182 1182 1183 1185 1196 1203 1208 1222 1224 1231 1263 1267 1277 1302 1328 1341 1343 1389 1392 1444 1453 1455 1470 1475 1479 1481 1489 1510 1529 1534 1541 1548 1553 1564 1585 1595 1625 1637 1652 1661 1672 1674 1680 1704 1706 1715 1723 1736 1762 1766 1777 1806 1813 1820 1832 1832 1847 1864 1866 1890 1891 1899 1914 1925 1927 1931 1935 1966 1969 1969 1984 1992 2001 2002 2012 2021 2024 2038 2047 2056 2072 2074 2089 2089 2098 2102 2108 2111 2119 2161 2163 2206 2214 2215 2221 2223 2227 2254 2289 2315 2316 2336 2336 2339 2355 2363 2380 2382 2395 2403 2427 2431 2437 2452 2477 2481 2481 2493 2497 2508 2525 2538 2568 2570 2570 2583 2587 2606 2615 2621 2625 2627 2637 2637 2650 2667 2689 2693 2694 2696 2703 2719 2732 2737 2744 2757 2758 2764 2770 2776 2799 2829 2830 2837 2849 2851 2852 2896 2898 2904 2911 2922 2931 2948 2949 2992 2996 3009 3016 3037 3040 3048 3049 3057 3070 3074 3075 3092 3099 3103 3106 3117 3120 3158 3193 3226 3236 3242 3257 3262 3265 3279 3282 3319 3328 3329 3333 3339 3356 3358 3370 3372 3374 3388 3390 3395 3424 3425 3447 3449 3459 3465 3466 3471 3471 3482 3493 3495 3509 3510 3516 3524 3527 3549 3561 3582 3584 3591 3592 3601 3618 3619 3645 3656 3657 3662 3707 3725 3725 3726 3734 3746 3775 3795 3797 3810 3820 3829 3833 3842 3844 3877 3881 3884 3910 3912 3913 3916 3957 3971 3971 3978 3979 3988 3988 4009 4030 4042 4045 4058 4072 4096 4109 4110 4148 4174 4177 4177 4189 4193 4211 4234 4250 4258 4277 4306 4315 4345 4345 4368 4378 4386 4386 4402 4402 4407 4417 4420 4421 4421 4428 4433 4435 4444 4445 4446 4453 4462 4466 4471 4494 4496 4541 4562 4568 4573 4575 4576 4578 4589 4591 4597 4620 4621 4623 4658 4661 4667 4678 4688 4702 4716 4717 4720 4722 4725 4767 4774 4782 4807 4808 4821 4825 4838 4840 4844 4858 4887 4898 4931 4941 4970 4976 4979 4991 4993 5000 5004 5012 5038 5049 5059 5070 5079 5093 5101 5106 5113 5116 5132 5152 5158 5160 5161 5166 5178 5203 5217 5217 5224 5240 5243 5263 5286 5286 5293 5299 5307 5326 5344 5348 5349 5384 5386 5389 5390 5408 5428 5442 5450 5453 5458 5464 5468 5484 5492 5524 5534 5536 5555 5563 5575 5591 5596 5600 5602 5609 5618 5626 5638 5662 5666 5675 5677 5692 5696 5719 5719 5728 5743 5744 5751 5753 5757 5761 5762 5763 5764 5766 5772 5812 5813 5821 5822 5844 5850 5855 5894 5895 5906 5933 5951 5957 5960 5990 6004 6041 6051 6066 6084 6090 6092 6096 6118 6159 6160 6170 6189 6192 6202 6202 6203 6206 6207 6221 6225 6226 6228 6267 6267 6273 6273 6290 6292 6293 6298 6299 6300 6307 6314 6316 6324 6329 6356 6388 6392 6394 6411 6418 6427 6429 6465 6474 6483 6493 6498 6503 6506 6523 6531 6534 6547 6550 6558 6559 6560 6563 6573 6579 6585 6589 6595 6609 6616 6632 6646 6664 6678 6687 6694 6699 6700 6731 6739 6744 6746 6755 6755 6758 6760 6768 6794 6797 6804 6824 6826 6838 6849 6850 6869 6891 6911 6912 6915 6920 6922 6925 6937 6937 6938 6941 6958 6960 6963 6978 7005 7020 7024 7029 7033 7044 7059 7119 7128 7131 7148 7151 7168 7173 7174 7180 7185 7213 7227 7231 7245 7251 7254 7265 7268 7271 7314 7336 7337 7343 7345 7347 7352 7399 7412 7415 7436 7443 7447 7453 7454 7455 7460 7461 7461 7482 7493 7511 7512 7525 7528 7534 7540 7548 7568 7590 7592 7592 7596 7616 7620 7635 7679 7686 7686 7687 7690 7692 7694 7706 7719 7724 7736 7743 7744 7750 7755 7757 7757 7758 7760 7770 7784 7785 7786 7798 7818 7843 7850 7862 7873 7882 7884 7887 7895 7907 7908 7924 7939 7946 7951 7961 7963 7973 8002 8017 8079 8091 8148 8155 8162 8171 8171 8197 8205 8217 8220 8222 8223 8228 8237 8237 8239 8257 8273 8284 8309 8352 8355 8370 8375 8376 8386 8391 8406 8433 8433 8468 8493 8499 8517 8532 8572 8576 8589 8593 8596 8597 8598 8600 8606 8606 8616 8619 8627 8629 8641 8645 8662 8691 8707 8709 8730 8753 8758 8781 8786 8790 8825 8826 8837 8848 8852 8853 8868 8880 8880 8884 8898 8915 8926 8965 8968 8968 8994 8996 8999 9010 9012 9024 9034 9050 9063 9064 9070 9076 9080 9087 9091 9096 9106 9126 9139 9140 9141 9143 9168 9175 9179 9182 9196 9219 9230 9233 9233 9235 9250 9259 9271 9280 9281 9282 9288 9291 9294 9295 9298 9321 9322 9359 9361 9374 9394 9399 9403 9410 9412 9418 9448 9451 9456 9472 9476 9488 9490 9500 9509 9518 9522 9525 9527 9535 9536 9543 9546 9551 9551 9570 9571 9586 9590 9600 9627 9656 9676 9676 9677 9690 9701 9709 9716 9726 9727 9727 9775 9775 9789 9794 9795 9795 9797 9802 9816 9818 9834 9845 9849 9850 9853 9860 9862 9869 9871 9875 9878 9879 9885 9917 9936 9939 9944 9944 9944 9946 9953 9960 9991
 time = 0.0002
---------------------------------------------------------------------

解説:
    今回の課題で作成したのは関数radixsort2,rd2,mainの３つである。
    main関数ではまず、ソートする要素数をコマンドライン引数にて指定できるようにし、
    その分、数列に代入する。
    この整数配列と要素数をソートするための関数radixsort2に渡して、ソートが完了した
    配列の中身を順に表示する。また、最後にこのソートにかかった時間を計測して表示する。
    radixsort2関数では、処理を行っておらず、rs2関数への引き継ぎだけである。
    rs2関数で実処理を行っている。
    ここではまず、与えられた要素数と同じ大きさの配列を２つ確保する。
    次に下の桁から２進表現で0,1に分けて新しく作成した配列に保存していく。
    分けられた配列を0,1の順番で元の配列に上書きしていく。
    これを最上位桁まで続け、終了し次第、なにも返さず呼び出し元に帰る。

レビュー課題:
    一つの関数内で配列を使い回すだけならmallocする必要はないのではないか

考察:
    ビット演算子を用いることで2進表現での計算も簡単にできるが、
    少し直感的に分かりづらいのではないかと思った。
    また、基数ソートならば使用できる場面は少々狭まるが
    それでも十分有用な程度に高速でかつアルゴリズムが簡単な
    ソートだと感じた。

アンケート:
    Q1.整数の性質を利用した整列方法について分かりましたか。
    A1.分かった。また、応用できる場面も多いと感じた。

    Q2.線形探索、2分探索、ハッシュ表について理解しましたか。
    A2.理解した。ただ、これを自分ですぐに実装できる気がしない。

    Q3.リフレクション(今回の課題で分かったこと)・感想・要望をどうぞ
    A3.水曜に高熱出して倒れて提出できなかったことから、体調管理の大切さと、課題を早めに終わらせることの大切さを理解しました。
