レポート11A

@@@ 1810678 山田朔也 (個人作業)

選択した課題: 演習4
    クイックソートを実行し、整列できることを確認し、その整列時間も確認する。
    また、既に整列されている列を渡した時の挙動も確認し、その解決方法を実装する。

方針:
    まず、前々回の内容を用いて実行時間を測定しつつ実際に実行する。
    恐らく、既に整列されている列をソートした場合ピボットの場所の関係上時間が
    かかることが予想されるので、これを回避するためにピボットの位置を
    要素を３つ比較し、その中央値をピボットの位置とする。

コード:
---------------------------------------------------------------------
// mergesort1demo.c --- demonstration of mergesort1.
// sortdemo.c --- demonstration for basic sort.
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "pqueue.h"

#define MAXDATA 1000000

// #define ENSHU_4_FT
// #define ENSHU_4_ST
 #define ENSHU_4_TT

static int a[MAXDATA];

int *ivec_new(int size) {
  int *a = (int*)malloc((size+1) * sizeof(int));
  a[0] = size; return a;
}
// mergesort=====================================
int *ivec_merge(int *b, int *c) {
  int ib = 1, ic = 1, ia = 1, *a = ivec_new(b[0]+c[0]);
  while(ia <= a[0]) {
    if(ib > b[0])          { a[ia++] = c[ic++]; }
    else if(ic > c[0])     { a[ia++] = b[ib++]; }
    else if(c[ic] < b[ib]) { a[ia++] = c[ic++]; }
    else                   { a[ia++] = b[ib++]; }
  }
  return a;
}

// quicksort=====================================
static void iswap(int *a, int i, int j) {
  int x = a[i]; a[i] = a[j]; a[j] = x;
}

void qs(int *a, int i, int j) {
  if(j <= i) { return; }
  int s = i, pivot = a[j];
  for(int k = i; k < j; ++k) {
    if(a[k] < pivot) { iswap(a, s++, k); }
  }
  iswap(a, j, s); qs(a, i, s-1); qs(a, s+1, j);
}

void quicksort(int *a, int n) { qs(a, 0, n-1); }

// quicksort_adv=================================
int med (int x, int y, int z) {
    if(a[x] > a[y]) {
        if(a[y] > a[z]){ return y; }
        else if(a[z] > a[x]) { return x; }
        else { return z; }
    } else {
        if(a[x] > a[z]) { return x; }
        else if(a[z] > a[y]) { return y; }
        else { return z; }
    }
}
void qs_adv(int* a, int i, int j) {
    if(j <= i) { return; }
    int s = i, pivot = a[med(i, (i+j)/2, j)];
    for(int k = i; k < j; ++k) {
      if(a[k] < pivot) { iswap(a, s++, k); }
    }
    iswap(a, j, s); qs(a, i, s-1); qs(a, s+1, j);
  }

 void quicksort_adv(int *a, int n) { qs_adv(a, 0, n-1); }

// use_queue=====================================
void mergesort1(int *a, int n) {
  pqueuep q = pqueue_new(n+1);
  int *v, *w;
  for(int i = 0; i < n; ++i) {
    v = ivec_new(1); v[1] = a[i]; pqueue_enq(q, v);
  }
  while(true) {
    v = (int*)pqueue_deq(q); if(pqueue_isempty(q)) { break; }
    w = (int*)pqueue_deq(q); pqueue_enq(q, ivec_merge(v, w));
    free(v); free(w);
  }
  for(int i = 0; i < n; ++i) { a[i] = v[i+1]; }
}

// main==========================================
#ifdef ENSHU_4_FT
int main(int argc, char *argv[]) {
  int n = atoi(argv[1]);
  srand(time(NULL));
  struct timespec tm1, tm2;
  for(int i = 0; i < n; ++i) { a[i] = rand()%10000; }
  clock_gettime(CLOCK_REALTIME, &tm1);
  quicksort(a, n);
  clock_gettime(CLOCK_REALTIME, &tm2);
  for(int i = 0; i < n; ++i) { printf(" %d", a[i]); }
  printf("\n");
  double dt = (tm2.tv_sec-tm1.tv_sec) + 1e-9*(tm2.tv_nsec-tm1.tv_nsec);
  printf("time = %.4f\n", dt);
  return 0;
}
#endif
#ifdef ENSHU_4_ST
int main(int argc, char *argv[]) {
  int n = atoi(argv[1]);
  srand(time(NULL));
  struct timespec tm1, tm2;
  for(int i = 0; i < n; ++i) { a[i] = i; }
  clock_gettime(CLOCK_REALTIME, &tm1);
  quicksort(a, n);
  clock_gettime(CLOCK_REALTIME, &tm2);
  for(int i = 0; i < n; ++i) { printf(" %d", a[i]); }
  printf("\n");
  double dt = (tm2.tv_sec-tm1.tv_sec) + 1e-9*(tm2.tv_nsec-tm1.tv_nsec);
  printf("time = %.4f\n", dt);
  return 0;
}
#endif
#ifdef ENSHU_4_TT
int main(int argc, char *argv[]) {
  int n = atoi(argv[1]);
  srand(time(NULL));
  struct timespec tm1, tm2;
  for(int i = 0; i < n; ++i) { a[i] = i; }
  clock_gettime(CLOCK_REALTIME, &tm1);
  quicksort_adv(a, n);
  clock_gettime(CLOCK_REALTIME, &tm2);
  for(int i = 0; i < n; ++i) { printf(" %d", a[i]); }
  printf("\n");
  double dt = (tm2.tv_sec-tm1.tv_sec) + 1e-9*(tm2.tv_nsec-tm1.tv_nsec);
  printf("time = %.4f\n", dt);
  return 0;
}
#endif
---------------------------------------------------------------------
---------------------------------------------------------------------
// pqueue.c --- pointer type queue impl. with array
#include <stdlib.h>
#include "pqueue.h"
struct pqueue { int ip, op, size; void **arr; };
pqueuep pqueue_new(int size) {
  pqueuep p = (pqueuep)malloc(sizeof(struct pqueue));
  p->ip = p->op = 0; p->size = size;
  p->arr = (void**)malloc(size * sizeof(void*)); return p;
}
bool pqueue_isempty(pqueuep p) { return p->ip == p->op; }
bool pqueue_isfull(pqueuep p) { return (p->ip+1)%p->size == p->op; }
void pqueue_enq(pqueuep p, void *v) {
  if(pqueue_isfull(p)) { return; }
  p->arr[p->ip++] = v; if(p->ip >= p->size) { p->ip = 0; }
}
void *pqueue_deq(pqueuep p) {
  if(pqueue_isempty(p)) { return 0; }
  void *v = p->arr[p->op++]; if(p->op >= p->size) { p->op = 0; }
  return v;
}
---------------------------------------------------------------------
---------------------------------------------------------------------
// pqueue.h --- int type queue interface
#include <stdbool.h>
struct pqueue;
typedef struct pqueue *pqueuep;
pqueuep pqueue_new(int size);
bool pqueue_isempty(pqueuep p);
bool pqueue_isfull(pqueuep p);
void pqueue_enq(pqueuep p, void *v);
void *pqueue_deq(pqueuep p);
---------------------------------------------------------------------

実行例:
---------------------------------------------------------------------
[y1810678@red99 11]$ ./a.out 1000
 6 10 25 25 36 42 42 47 50 57 60 64 67 73 76 101 104 108 116 118 120 135 136 137 149 168 173 189 200 213 218 234 243 256 261 266 273 293 307 310 330 335 339 341 344 348 370 385 393 417 417 449 464 475 480 492 503 503 503 505 518 518 519 519 530 531 540 547 549 565 568 575 576 581 586 591 598 602 603 612 627 629 635 641 643 665 677 677 684 703 710 715 722 734 740 748 769 778 784 792 793 794 813 827 848 856 883 894 899 910 919 924 948 949 952 957 960 978 982 982 984 988 999 1005 1005 1033 1048 1051 1053 1055 1055 1066 1080 1088 1104 1114 1127 1131 1137 1144 1147 1150 1165 1196 1252 1254 1264 1273 1280 1287 1299 1310 1311 1314 1320 1324 1351 1355 1385 1385 1411 1425 1431 1439 1460 1461 1464 1471 1477 1486 1492 1513 1534 1535 1551 1564 1596 1616 1643 1645 1653 1655 1657 1660 1669 1688 1700 1704 1704 1715 1743 1747 1756 1762 1764 1766 1774 1775 1781 1785 1798 1814 1826 1828 1838 1843 1862 1881 1897 1900 1901 1914 1922 1938 1952 1960 1964 1966 1974 1990 2023 2025 2025 2026 2042 2056 2059 2063 2087 2093 2102 2104 2110 2117 2125 2129 2170 2170 2178 2186 2232 2235 2239 2246 2250 2260 2266 2268 2284 2285 2287 2295 2306 2312 2316 2321 2328 2333 2335 2338 2350 2367 2376 2402 2407 2432 2434 2443 2453 2453 2487 2495 2509 2524 2526 2543 2545 2555 2557 2579 2590 2597 2599 2607 2609 2614 2619 2620 2624 2630 2637 2674 2676 2682 2689 2691 2692 2705 2720 2724 2728 2737 2747 2749 2805 2814 2826 2856 2876 2898 2909 2953 2956 2959 3014 3021 3023 3028 3039 3053 3063 3069 3088 3109 3116 3135 3145 3146 3150 3160 3162 3163 3167 3174 3230 3237 3252 3255 3260 3296 3310 3357 3359 3370 3391 3393 3423 3437 3448 3451 3460 3499 3512 3512 3515 3518 3535 3555 3562 3566 3595 3634 3641 3672 3684 3688 3689 3712 3712 3726 3739 3740 3758 3781 3812 3822 3836 3836 3858 3876 3878 3881 3886 3899 3899 3903 3912 3939 3962 3963 3969 3986 3992 3996 4008 4010 4022 4033 4040 4049 4053 4059 4064 4068 4068 4090 4101 4104 4112 4114 4135 4138 4151 4163 4201 4208 4235 4243 4275 4288 4296 4306 4306 4332 4340 4340 4350 4355 4363 4368 4380 4384 4387 4395 4399 4411 4411 4416 4423 4424 4473 4490 4491 4496 4502 4514 4521 4553 4563 4567 4572 4576 4585 4586 4586 4594 4601 4601 4604 4606 4606 4611 4617 4618 4623 4636 4638 4642 4643 4647 4655 4656 4665 4677 4678 4708 4725 4743 4757 4781 4814 4822 4823 4830 4841 4857 4859 4867 4896 4913 4928 4929 4932 4936 4936 4940 4942 4948 4949 4961 4979 4982 5062 5081 5098 5110 5123 5142 5151 5152 5160 5183 5183 5189 5203 5205 5208 5244 5244 5250 5263 5294 5339 5363 5378 5403 5410 5417 5446 5448 5451 5457 5479 5496 5548 5550 5566 5575 5596 5605 5614 5621 5622 5640 5643 5645 5649 5671 5680 5685 5693 5698 5703 5742 5752 5758 5763 5768 5775 5775 5783 5785 5791 5804 5812 5815 5825 5827 5828 5840 5849 5854 5859 5864 5877 5884 5887 5901 5914 5931 5960 5962 5970 5986 5987 6008 6009 6013 6021 6046 6049 6055 6077 6093 6100 6100 6130 6149 6153 6154 6168 6170 6185 6193 6200 6200 6236 6242 6255 6255 6256 6270 6272 6274 6280 6280 6292 6305 6314 6331 6335 6341 6346 6355 6365 6371 6380 6382 6387 6408 6450 6455 6463 6464 6485 6498 6502 6505 6554 6560 6565 6582 6591 6597 6602 6611 6617 6618 6627 6638 6639 6651 6663 6668 6671 6673 6676 6678 6713 6723 6731 6762 6763 6764 6776 6789 6795 6799 6812 6814 6822 6839 6847 6847 6848 6858 6863 6864 6911 6932 6942 6944 6945 6953 6953 6966 6993 6993 6995 6996 7009 7025 7026 7035 7038 7039 7068 7069 7082 7083 7085 7089 7091 7096 7100 7102 7111 7114 7114 7114 7127 7132 7134 7135 7142 7156 7160 7170 7205 7224 7225 7225 7228 7230 7233 7234 7242 7255 7259 7268 7280 7292 7296 7299 7304 7309 7328 7341 7375 7379 7390 7391 7412 7415 7442 7448 7448 7456 7478 7486 7493 7496 7513 7513 7515 7523 7531 7533 7534 7542 7547 7549 7559 7564 7568 7578 7590 7608 7609 7612 7615 7619 7624 7666 7667 7669 7682 7689 7701 7718 7732 7734 7734 7740 7744 7773 7781 7810 7817 7828 7881 7886 7902 7916 7926 7929 7930 7937 7940 7960 7981 7989 8001 8002 8014 8029 8036 8037 8037 8038 8050 8060 8070 8081 8093 8114 8115 8119 8138 8138 8140 8155 8169 8175 8176 8183 8183 8190 8203 8217 8217 8246 8250 8251 8255 8259 8284 8292 8300 8301 8301 8324 8336 8347 8348 8361 8363 8363 8380 8401 8413 8414 8431 8442 8462 8476 8484 8503 8506 8518 8535 8552 8557 8561 8563 8577 8608 8622 8624 8624 8628 8650 8670 8677 8740 8744 8770 8770 8778 8790 8795 8796 8799 8802 8817 8838 8842 8851 8859 8862 8865 8889 8924 8932 8948 9009 9010 9012 9016 9021 9031 9034 9037 9046 9065 9074 9081 9088 9092 9104 9152 9188 9218 9238 9240 9240 9262 9287 9289 9291 9305 9319 9334 9337 9356 9357 9362 9363 9368 9369 9383 9387 9392 9403 9413 9414 9417 9421 9430 9440 9441 9448 9450 9452 9474 9479 9519 9520 9529 9569 9576 9595 9599 9602 9608 9618 9624 9632 9641 9644 9661 9668 9676 9678 9686 9699 9705 9707 9710 9713 9717 9722 9728 9729 9731 9733 9734 9757 9758 9763 9795 9802 9829 9849 9851 9857 9862 9868 9883 9887 9915 9917 9918 9926 9933 9935 9955 9960 9967 9982
time = 0.0001
---------------------------------------------------------------------
---------------------------------------------------------------------
[y1810678@red99 11]$ ./a.out 1000

time = 0.0023
---------------------------------------------------------------------
---------------------------------------------------------------------
[y1810678@red99 11]$ ./a.out 1000

time = 0.0008
---------------------------------------------------------------------

解説:
    このコードではマクロdefineを用いて実行するテストを変えている。最後がFTのものは
    乱数の数列に単に実行しその時間を計測しただけのものである。また時間計測は第九回のものに則って
    作成してある。
    最後がSTのものは既にソートされた数列に単に実行しその時間を計測したものである。
    最後がTTのものは既にソートされた数列に改善したクイックソートを実行しその時間を計測したものである。
    改善の方法だが、呼び出されたときに指定された数列の範囲内で両端の２つとその中央の１つのなかで
    中央値となる要素をピボットに指定するようにしている。
    この方法を用いることで少なくとも既に整列されている数列に対しては多少の速度の改善が
    なされていることが三回目の実行例にて確認できる。

レビュー課題:
    両端と中央では限定的すぎるから、選択する要素をランダムに取得するのが良いのではないか。

考察:
    以上の結果から今回のソートのコードの改善は正しいと言える。
    このソートの最悪の計算量はn^2なので、二回目の実行例はまさにそれであろう。
    これは選択するピボットの数が順に最大値だからである。
    しかし、ピボットを位置を変えることでより良く計算が可能であるのはアルゴリズム
    上で自然なことだろう。

アンケート:
    Q1.さまざまな整列手法からいくつくらい理解しましたか。
        A1.３つほど理解した。また、この内容は基礎プロと大きく被るのでなんとなくは理解していた。
    Q2.最大ヒープとは何か分かりましたか。
        A2.わかった。非常に面白い考え方に感じた。
    Q3.リフレクション(今回の課題で分かったこと)・感想・要望をどうぞ。
        A3.ういっすknっちって流行ってるんですかね…(困惑)
