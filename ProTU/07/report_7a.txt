レポート7A

@@@ 1810678 山田朔也 (個人作業)

選択した課題:演習1_c
    単連結リストの2番目と3番目のセルを入れ替える

方針:
    入れ替えに必要な各要素のアドレスを保存し、それを順番に入れていく

コード: プログラム一式(動くものを貼ること)
---------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

//#define ENSHU1_EX
//#define ENSHU1_A
//#define ENSHU1_B
#define ENSHU1_C
//#define ENSHU1_D

struct node {
    double data;
    struct node *next;
};
typedef struct node *nodep;

nodep node_new(double d, nodep n) {
    nodep p = (nodep)malloc(sizeof(struct node));
    p->data = d; p->next = n;
    return p;
}

void plist(nodep p) {
    while(p != NULL) {
        printf(" %g", p->data);
        p = p->next;
    }
    printf("\n");
}

nodep mklist(int n, char *a[]) {
    nodep p = NULL;
    for(int i = n-1; i >= 0; --i) {
        p = node_new(atof(a[i]), p);
    }
    return p;
}

int main(int argc, char *argv[]) {
    nodep p = mklist(argc-1, argv+1); plist(p);
#ifdef ENSHU1_EX
    p->next->next = p->next->next->next; plist(p);
    p->next->next = node_new(1.0, p->next->next); plist(p);
#endif
#ifdef ENSHU1_A
    nodep a = p;    // aはリストの先頭
    // aをリストの最後から一つ前に
    while(a->next->next == NULL) {
        a = a->next;
    }

    a->next = p;    // リストの最後の次を先頭に
    p = p->next;    // リストの先頭の更新
    a->next->next = NULL;   // リストの最後の更新

    // リストを先頭から表示
    plist(p);
#endif
#ifdef ENSHU1_B
    nodep a = p; // aをリストの先頭に
    // aをリストの最後に
    while(a->next != NULL) {
        a = a->next;
    }

    a->next = p;    // リストの最後の次を先頭に
    p = p->next;    // リストの先頭の更新
    a->next->next = NULL;   // リストの最後の更新

    // リストを先頭から表示
    plist(p);
#endif
/*==============================================*
 * 実行されるのはここだけ
 *==============================================*/
#ifdef ENSHU1_C
    // リストの長さが適切かどうか判断
    if(p == NULL || p->next == NULL || p->next->next == NULL) {
        printf("長さが3以上のリストを用意してください\n");
        return 0;
    }

    // リストの2～4番目のアドレスを保存
    nodep a_2 = p->next;
    nodep a_3 = p->next->next;
    nodep a_4 = p->next->next->next;

    // リストの順番を入れ替える
    p->next = a_3;
    p->next->next = a_2;
    p->next->next->next = a_4;

    // リストを先頭から表示
    plist(p);
#endif

#ifdef ENSHU1_D
    // 先頭のアドレスを保存
    nodep a = p;

    // すべての要素において実行
    while(p != NULL) {
        nodep cp = node_new(p->data, p->next);
        p->next = cp;
        p = p->next->next;  // pを次の要素へ移す
    }

    // リストを先頭から表示
    plist(a);
#endif
    return 0;
}
---------------------------------------------------------------------

実行例:
--------------------------------------------------------------------
$ gcc slist.c
$ ./a.exe 3 5 7
 3 5 7
 3 7 5
$ ./a.exe 3 5 7 9
 3 5 7 9
 3 7 5 9
$ ./a.exe 3 5 7 9 11
 3 5 7 9 11
 3 7 5 9 11
$ ./a.exe 3 5
 3 5
長さが3以上のリストを用意してください
--------------------------------------------------------------------

解説:
    基本的には方針になぞって作成されている。
    交換に必要な要素は2,3,4番目なので、それぞれのアドレスを
    a_2, a_3, a_4として確保しておく。
    それを、単連結リストpに順に代入していき、最後にリストの先頭から内容を
    表示していく。

レビュー課題:
    マクロを使用しての問題の管理が効率的で良いと感じた

考察:
    一つの要素がそれぞれアドレスを所持しているため、管理はやりやすいと感じた。
    また、これは構造体に要素を一つ追加すればいいだけなのだが、一つ前にもどる
    方法が無かったのはやりづらかった。
    リストにこれを追加するのがいいかもしれない。

アンケート:
    Q1. 単連結リストの概念を理解しましたか
        A1. おおよそ理解した、なんとか自分一人でも同じものを作れると思われる。

    Q2. 並びエディタのようなコマンドに応答するプログラムの作り方を納得しましたか。
        A2. 納得した。これは個人的な趣味にも応用できるのではないかと感じた。

    Q3.リフレクション(今回の課題で分かったこと)・感想・要望をどうぞ。
        A3. 今回の課題に限らず、ポインターは重要なんだと感じた。
        P.S.もみあげありがとう御座いました
