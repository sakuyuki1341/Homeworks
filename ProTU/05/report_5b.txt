レポート5B

@@@ 1810678 山田朔也 (個人作業)




選択した課題1: 演習2
正の整数nを与えて,nから始まる1-2減少列を全て表示するプログラムを作成する。


方針1:
　配列を一つ作成し、その配列を再帰的に呼び出した関数で利用する。
関数が呼びされた場合、まず条件分岐で配列に代入する値が1の場合、1を代入後配列の内容を全表示。
そうでなければ、値を代入後、1引いたものと、2引いたものを引数として再度関数を呼び出す。


コード1:
-----------------------------------------------------------------
 1 #include <stdio.h>
 2 #include <stdlib.h>
 3
 4 #define ARR_SIZE 256
 5
 6 void one_two_dec(int n, int *arr, int now) {
 7   if(n == 1) {
 8     for(int i = 0; i < now; i++) {
 9       printf("%d", arr[i]);
10     }
11     printf("1\n");
12   } else if(n > 1){
13     arr[now] = n;
14     now++;
15     one_two_dec(n-1, arr, now);
16     one_two_dec(n-2, arr, now);
17  }
18 }
19
20 int main(int argc, char *argv[]) {
21   int arr[ARR_SIZE];
22   int now = 0;
23   one_two_dec(atoi(argv[1]), arr, now);
24   return 0;
25 }
-----------------------------------------------------------------

実行例1: 
-----------------------------------------------------------------
[y1810678@red99 05]$ ./a.out 7
7654321
765431
765421
765321
76531
764321
76431
76421
754321
75431
75421
75321
7531
-----------------------------------------------------------------

解説1: 
　方針で説明した事に基本的に沿うように作成している。
　まずはmain関数でコマンドライン引数を利用し、最初の変数nの大きさを設定している。
そして、次に配列arrを作成し、変数nの値と配列arr、そして、呼び出された関数内で現在配列の何番目が空いているかを
保存する変数nowを引数として関数one_two_decを呼び出す。
　関数one_two_decでは受け取った変数n、配列arr、変数nowを元に、nの値を配列arrの空いている場所に代入。
その後、nowの値を一つ増やし、三要素のうちnは1,2減らしたものをそれぞれ再帰させている。
　仮に、nの値が1の場合、arrの内容を全部表示し、最後に1を表示した後改行をしている。


考察1: 
　再帰を用いることで、ループを用いて実装するよりも記述量は大幅に減ることがある。
ただし、実装する際には、ループを用いたものよりも書き手が実際の動作のイメージがしづらく、
実装時間が大幅にかかってしまう。
また、分かりにくいという問題は書き手だけではなく、読み手にも発生しうる問題だと思われた。




選択した課題2: 演習3
文字の配列とその要素数、および生成する文字列の長さを与えて、指定された文字のあらゆる組み合わせで指定された長さの文字列を
表示するプログラムを作成する。 

方針2: 
　これも課題１と同様に再帰を用いて作成する。その際に、再帰させる関数に与える引数としては、
・組み合わせ後の配列arr
・arrにおいて次に代入するべき位置を保存する変数now
・与えられた文字の配列str
・strにおいての代入する文字の位置を保存する変数insert
・残り代入しなくてはいけない文字数count
これらを再帰するたびに更新していけば目的のプログラムを実装できると思われる。

コード2:
-----------------------------------------------------------------
 1 #include <stdio.h>
 2 #include <stdlib.h>
 3
 4 // arr: 組み合わせた後の配列
 5 // now: arrにおいて次に代入するべき位置を表記
 6 // str: 与えられた文字の配列
 7 // insert: strにおいて次に代入する文字の位置を表記
 8 // count: 残り代入しなくてはいけない文字数
 9
10 //  vol: 文字の配列の要素数
11 int vol;
12
13 void combine(char *arr, int now, char *str, int insert, int count) {
14   if(count == 0) {
15     arr[now++] = str[insert];
16     arr[now] = '\0';
17     printf("%s\n", arr + 1);
18     return;
19   }
20
21   arr[now++] = str[insert];
22   count--;
23   for(int i = 0; i < vol; i++) {
24     combine(arr, now, str, i, count);
25   }
26
27 }
28
29 // argv: 文字の配列、その要素数、生成する長さ
30
31 int main(int argc, char *argv[]) {
32   vol = atoi(argv[2]);
33   int count = atoi(argv[3]);
34   int now = 0, insert = 0;
35   char arr[256];
36   combine(arr, now, argv[1], insert, count);
37   return 0;
38 }
-----------------------------------------------------------------

実行例2: 適宜(グラフィクス等実行例がテキストで作れないものは除く)
-----------------------------------------------------------------
[y1810678@red99 05]$ ./a.out abc 3 3
aaa
aab
aac
aba
abb
abc
aca
acb
acc
baa
bab
bac
bba
bbb
bbc
bca
bcb
bcc
caa
cab
cac
cba
cbb
cbc
cca
ccb
ccc
-----------------------------------------------------------------

解説2:
　方針で説明した事に基本的に沿うように作成している。
　まずはmain関数でコマンドライン引数を利用し、文字の配列、その要素数、生成する文字列の長さを与えている。
そして、次に変数volに与えられた文字の配列の要素数を代入する。これで関数combine内で関数combineを要素数分関数combineを呼び出す。
また、countにargv[3]をint型に直したものを代入し、nowとinsertに適切な値でもって宣言する。
最後に、配列arrを作成し、これらをまとめて関数combineに渡して実行する。
　関数combineでは、arrのnowの位置に文字の配列のうちinsertで指定されたものを代入。
そしてここでnowに1を足し、countから1を引く。その後、文字の配列の要素数分combineを呼び出し、
それぞれが別の文字を指定するようにinsertの位置にfor内で宣言した変数iを引数として渡して実行する。
　もし、countが0になったら最後の文字を代入後、ナル文字を代入。そして配列arrの中身を表示する。
このときarr+1となっているのは、combineが最初に呼び出された際に代入された文字を表示しないようにするためである。


考察2: 
　今回はvolのみグローバル変数にしているが、配列arrやstrもグローバル化させることで渡す必要のある引数が3つになる。
そうすれば可読性の高いコードになるだろうと思われる。
　基本的に再帰は可読性が低くなりやすいため、できるだけ読み手に分かりやすいようにコメントを記述したり、引数の数を少なくするなどの
工夫をする必要があるだろう。




アンケート: 
Q1.再帰呼出しのプログラムが書けるようになりましたか。
	A1.書くことは可能であるが、完成までに長時間かかったり、読みづらいコードになってしまう。
Q2.再帰呼び出しでグラフの探索ができることを納得しましたか。
	A2.納得した。ただし、これに関しては更に数題課題を解く等しないとその場で直ぐに実装するなどが出来ない予感がする。
Q3.リフレクション（今回の課題で分かったこと）・感想・要望をどうぞ
	A3.再帰呼び出しはメモリの圧迫が大きいと聞いたことがあるのですが、メモリの量が問題となることはどれくらいあるのか気になります。
